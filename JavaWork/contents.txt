https://docs.oracle.com/en/java/javase/17/docs/api/index.html
1. 자바 개발 도구
	(1) 컴파일러
		- JDK(Java Developer Kit) : 자바로 프로그램을 만듦
		- JRE(Java Runtime Environment) : 만들어진 걸 실행시키는 용도
		- v.17 (LTS : 장기 지원 서비스)
	(2) 환경변수 등록
	// java파일이 어느경로에 있던 상관없이 컴파일 하고 실행시키려고 환경변수 path에 아래 툴 경로를 지정
		- JAVA_HOME
		- PATH
		- 테스트
			javac -version
			java -version
2. Java 대표 기술
	(1) Java SE : 응용 프로그램(도스용, 윈도우용)
	(2) Java EE : 분산, Web, 안드로이드
	(3) Java ME : Embeded
	(4) FX, ...
3. 문자 인코딩
	- 명령 프롬프트
		chcp 65001 : UTF-8
		chcp 949 : 기본 한글 윈도우 방식
4. 변수와 데이터 타입
	(1) 데이터 타입
		1) 기본 데이터 타입(비객체 데이터 타입) // 한 개의 데이터만 저장
			- 정수형
				byte(1byte), short(2byte), int(4byte, default), long(8byte)
			- 실수형
				float(4byte), double(8byte, default)
			- 문자형
				char(2byte)
			- 논리형
				boolean : true, false
		2) 객체 데이터 타입
			- User Define
			- Built in
	(2) 변수
		1) 임시 기억 공간
		2) 반드시 선언 및 초기화
		3) 반드시 선언한 곳에서만 사용할 수 있다(유효 범위)
			- stack(임시적, 일시적) //LIFO 구조 <--> heap(장기적)
	(3) 연산자
		1) 강제 형변환 연산자(캐스팅 연산자)
			변수 = (데이터 타입)값;
			
	※ javac -d ../bin 클래스.java // 클래스.java의 클래스파일을 bin 폴더에 저장
	※ java -cp ../bin 클래스 // bin에 있는 클래스파일을 실행
5. Class - 1
	(1) 특징
		1) 묶음 : 변수(멤버변수, 인스턴스 변수, 속성, 필드), 함수(메서드, 멤버함수)
		2) 캡슐화 단위 : 최소 단위(원자성), 편리, 보안
		3) 설계도(추상적) -> 인스턴스(객체)
		4) 데이터 타입의 역할
		5) 객체 설계 5원칙 : SOLID
		6) 객체의 자격요건
			- 상속성(Inheritance)
			- 다형성(Polymorphism)
			// 상위 클래스 타입의 참조 변수를 통해서 하위 클래스의 객체를 참조할 수 있도록 허용하여 상위 클래스가 동일한 메시지로 하위 클래스들이 서로 다른 동작을 할 수 있도록 한다
			- 캡슐화(Incapsulation)
	(2) 변수의 종류
		1) 선언된 위치에 따른
			- 클래스 : 멤버변수, 인스턴스 변수, 필드
			- 메서드 : 변수(지역 변수)
		2) 저장되는 값에 따른
			- 값 : 변수(기본 데이터 타입으로 선언)
			- 주소 : 참조 변수(클래스로 선언)
	(3) 메서드
		1) 동작(기능)을 구현
		2) 작성 방법
			리턴타입  메서드명(...) {
				기능 구현
			}
		3) 호출 방식
			- 인자가 없는 방식
			- 인자가 있는 방식
				- Call By Value : 값에 의한 전달
				- Call By Reference : 참조에 의한 전달
			- 리턴값이 있는 방식
	(4) 메서드의 오버로딩 : 중복 정의
		- 매개변수가 달라야 한다(개수, 형식, 순서)
	(5) 생성자(Constructor)
		1) 인스턴스 생성
		2) 메서드명은 반드시 클래스명과 동일
		3) 리턴 타입이 없다
		4) 인스턴스를 생성할 때 단 한 번만 호출
		5) 모든 클래스는 기본 생성자(Default Constructor)를 갖는다
			만약, 다른 생성자를 만들 경우 더 이상 기본 생성자는 제공되지 않는다
		6) 초기화	
	(6) Garbage Collection
		1) JVM : 바이트 코드 파일(.class)을 해당 운영체제에서 실행 가능한 기계어로 번역해서 실행
		2) System.gc()
		3) finalize()
	(7) this
		1) 현재 실행 중인 인스턴스의 주소를 저장하는 참조 변수
		2) read only
		3) this()
6. ANT
	(1) 자바 언어를 사용하여 필요한 일련화된 과정을 자동화하는 소프트웨어 빌드 도구
	(2) Ant > Maven > Gradle
	(3) 설치
		1) https://projects.apache.org/
		2) apache-ant-1.10.14-bin.zip
		3) 환경변수 등록 : ANT_HOME, Path
	(4) 테스트
		ant
		ant -version
	(5) 사용법
		1) build.xml 파일 생성
			- work03 폴더에 생성
			<project>
				<target>
					<task .../>
				</target>
			</project>
		2) build.xml이 있는 위치에서 ant 프로그램 실행
7. 배열
(1) 같은 이름으로 정의된 연속적인 공간
	배열의 단점 : 삽입 삭제가 비효율적, 크기를 바꿀 수 없음, 같은 타입만 사용 가능
(2) 배열의 응용
	1) 검색 기능
		- 순차 검색(Sequential)
		- 이분(이진) 검색(Binary Search)
	2) 정렬 기능
		- 버블, 선택, 삽입, 퀵
		- 버블 정렬 : 서로 이웃하는 것끼리 비교하여 교환
		- 선택 정렬 : 기준을 선택해서 비교하여 교환
		-------------------------------
		버블 정렬
		6	3	7	5
		
		3	6	7	5
		3	6	7	5
		3	6	5	7
		
		3	6	5	7
		3	5	6	7
		
		3	5	6	7
		
		선택 정렬
		6	3	7	5
		
		3	6	7	5
		3	6	7	5
		3	6	7	5
		
		3	6	7	5
		3	5	7	6
		
		3	5	6	7
(3) 자바는 배열을 객체로 취급한다.
(4) 다차원 배열(2차원 배열 이상)
(5) 불규칙 배열
(6) String
	- Method
		- charAt(int index) : String으로 저장된 문자열 중에서 한 글자만 선택해서 char타입으로 변환
		- compareTo(String anotherString) : 두 개의 값을 비교하여 int 값으로 변환
		- compareToIgnoreCase(String str) : 두 개의 값을 비교하여 int 값으로 변환하는데, 대소문자 무시
		- concat(String str): 문자열 합치기
		- contains(CharSequence s) : 대상 문자열에 특정 문자열이 포함되어 있는지 확인
		- endsWith(String suffix) 해당 String 객체가 인자로 전달된 String으로 끝난다 true, 그렇지 않다면 false
		- startsWith(String prefix) : 해당 String 객체가 인자로 전달된 String으로 시작된다면 true, 그렇지 않다면 false
		- equals(Object anObject)
		- equalsIgnoreCase(String anotherString)
		- getBytes()
		- indexOf(int ch)
		- isBlank()
		- isEmpty()
		- join(CharSequence delimiter, CharSequence... elements)
		- lastIndexOf(int ch)
		- length()
		- matches(String regex)
		- replace(char oldChar, char newChar)
		- replaceAll(String regex, String replacement)
*****	- split(String regex) 
		- strip()
		- substring(int beginIndex)
		- substring(int beginIndex, int endIndex)
		- toLowerCase()
		- toUpperCase()
		- toString()
		- trim()
		- valueOf(boolean b)
		1) 불변성
		2) StringBuffer, StringBuilder
		3) 문자열을 객체로 취급한다
		4) 동일한 값을 갖는 인스턴스를 중복해서 만들지 않는다
(7) Command Line Argument
	※ 메인함수에 인자가있는 이유 args가 있는이유는 옵션을 받아주기 위해있는 매개변수이다.
	어떤 형식으로 문자형식을 여러개로 2차원 배열로 받아 줄수있다.

	java PhoneBook
		사용법 : java PhoneBook 사람이름
	java PhoneBook 홍길동
	
	홍길동 111-1111 서울시 강남구
	----------------------
	String data[][] = {
		{"홍길동", "111-1111", "서울시 강남구"},
		{"임꺽정", "222-2222", "서울시 종로구"},
		{"신사임당", "333-3333", "서울시 도봉구"}
8. Class - 2
(1) Access Modifier
	// 접근 허용
	1) default : 부분 허용
	2) public : 완전 허용
	// 접근 거부
	3) private : 완전 거부
	4) protected : 부분 거부
(2) 메서드의 인자 전달 방식
	1) 값에 의한 전달
		- 소량의 데이터, 간단한 데이터
	2) 참조에 의한 전달
		- 대량 또는 복잡한 데이터
(3) 재귀 호출
	1) Stack
		- 지역 변수
		- 임시 데이터나 주소값 저장
		- 메서드의 복귀 주소
	2) Heap
		- 전역 변수, 객체
		- 지속적으로 값을 보관
	3) Queue
		- 지역 변수
		- 임시 데이터나 주소값 저장
		- FIFO 구조
(4) Static
	1) 클래스, 메서드, 변수 모두 사용 가능
	2) 인스턴스와는 별도로 프로그램 실행 시 만들어지는 메모리
	3) 다른 모든 인스턴스들이 공동으로 사용하는 메모리
	4) 단 1개만 만들어지는 메모리
	5) 클래스 변수
(5) Singleton Pattern
	1) 필요없는 객체가 생성되는 것을 방지하기 위한 목적. 단 1개의 인스턴스만 만들 수 있게 한다
	2) 방법
		- 외부에서 인스턴스가 생성되는 것을 막는다
		- 자체적으로 인스턴스를 1개만 생성해서 리턴
		- 생성자, private, static
(6) 중첩 클래스(내부 클래스)
	1) 클래스 내부에 다른 클래스를  포함하는 것
	2) 내부 클래스
		- General Class
		- Static Class
	3) 중첩 클래스를 사용해야 하는 경우
		- 클래스들끼리 자주 접근해야 하는 경우
		- 전용 클래스로 사용할 경우 -> 클래스의 확장
	4) 내부클래스는 외부클래스$내부클래스.class 파일로 작성됨
9. Class - 3 : 상속
(1) 상속 제외
	1) 생성자
	2) private (사용하려면 getter와 setter 메소드를 이용)
(2) 부모의 생성자는 호출 가능하다
	1) super() : 부모의 생성자 호출
	2) 부모의 생성자를 호출할 때에는 반드시 자식의 생성자 메소드에서 가장 처음에 호출
	3) super : 참조 변수로서 사용 (this와 같은 맥락)
		super.변수, super.메서드()
(3) 생성자의 호출 순서
	자식의 기본 생성자 내에서 항상 부모의 기본 생성자가 호출되고 있다
(4) 상속은 확장의 개념이다 (extends)
(5) 상속은 반드시 단일 상속만 지원된다
	상속 설계:
		1) 중복 기능을 가지지 않게 한다.
		2) 부모 클래스는 반드시 최소의 기능을 갖게 한다
		3) 부모 클래스는 재사용이 가능해야 한다
		설계 실습해보기. ex) 자판기
(6) 부모 클래스와 자식 클래스의 참조 관계
	1) 인스턴스가 결정되지 않은 경우
		A(부모)	B	C	D
		A obj = new B();
		A obj = new C();
		A obj = new D();
		...
		B b = (B)obj; // 원상복귀
	2) 여러 개의 자식 인스턴스 관리
		A a[] = new A[5]; // A라는 주소를 저장하는 참조 변수가 5개 만들어짐
		for(int i = 0; i<5; i++)
			a[i] = new A(); // 객체 생성
		
		a[0] = new B();
		a[1] = new C();
		a[2] = new B();
		...
	ReferenceTest.java
(7) 메서드의 오버라이딩(Overriding)
	1) 오버로딩
		- 메서드
		- 다형성
		- 중복 정의
		- everywhere
	2) 오버라이딩
		- 메서드
		- 다형성
		- 재정의
		- 반드시 상속에서만 사용 가능
		- 부모와 똑같은 형태
		- annotation : 실수를 방지하기 위해 선언(여기서는 부모와 형태가 다르면 오류)
			형태 : @Override
(8) 추상 클래스, 추상 메서드 : abstract
	1) 추상 메서드
		- 내용이 없이 선언만 되어있는 메서드
		- 반드시 메서드 앞에 abstract 키워드 사용
		- 자식 클래스는 반드시 오버라이딩을 해야 한다
	2) 추상 클래스
		- 추상 메서드를 1개 이상 보유
		- 반드시 클래스 앞에 abstract 키워드 사용
		- 절대로 인스턴스를 생성할 수 없다. 역할을 더 명확하게 하기 위해(자식에게 물려주기 위한 클래스이다)
(9) final
	1) 변수 : 값을 변경 할 수 없음
		static final int MAX = 10;
		...
		MAX = 100; // 에러
		
		if(x < MAX){...
	2) 메서드 : 오버라이딩 할 수 없음
		final void method() {
			...
		}
	3) 클래스 : 더 이상 상속 할 수 없음
		final class A {
			...
		}
(10) Object
	// Object는 모든 클래스의 가장 최상위 클래스이므로
	Object obj = new ?(); // 모르는 객체가 있을 경우 Object로 생성
10. 인터페이스(Interface)
(1) 클래스를 만들기 위한 설계도
(2) 완전 추상 클래스
(3) 표준화를 위한 약속, 규칙
(4) 의존성(dependency)을 최소화
(5) 다중 상속을 지원
(6) implements
11. 패키지(Package)
(1) 묶음(폴더) : 클래스
(2) 효과
	1) 필요한 클래스를 적재적소에 사용 가능
	2) 클래스 이름 충돌 방지
(3) 사용방법
	1) 패키지는 하위 폴더에서 실행
	2) 패키지.클래스명으로 실행
(4) 압축
	1) 압축을 할 때 : jar cvf [파일명.jar] [압축할 파일명.java]
	2) 압축을 풀 때 : jar xvf 파일명.jar
12. 기본 APIs : java.lang, java.util, java.text
(1) Date와 Calendar
(2) CurrentTimeMillis()
(3) Random
(4) DecimalFormat
(5) Wrapper
(6) StringTokenizer
(7) Collection (배열로 할 수 없을 때 컬렉션 사용)
	1) 변수 -> 배열 -> 클래스 -> 컬렉션(클래스 + 연결리스트)
	2) 종류
		- Set // 저장을 위해 사용
			정렬 순서가 없다
			중복되지 않는다
			HashSet, LinkedHashSet, TreeSet, ...
		- List // 목록으로 꺼내서 list로 쓰기 위해
			정렬 순서가 있다
			중복될 수 있다
			ArrayList, Vector, LinkedList, ...
		- Map // 검색을 위해(키와 값으로 묶어)
			키와 값을 한쌍으로 저장
			검색의 목적으로 사용
			HashMap, HashTable, ...
13. Generic
(1) 특정 타입(객체형)을 미리 검사
(2) C++의 Template 기능
(3) 문법
	1) 클래스나 메서드에서 사용
	2) 사용 문법
		클래스명 변수<객체 타입> = new 클래스<객체 타입>();		
14. 예외 처리
예외가 발생했을 때 예외에 대한 제어권을 시스템(JVM)이 아니라 개발자가 가질 수 있게 하는 방법
(1) why?
	1) 예외가 발생했을 때 메시지에 대한 표현 문제
	2) 프로그램의 비정상적인 종료
(2) 문법
	1) try
	2) catch
	3) throw
	4) throws
	5) finally
	------------------
	try {
		코드들
		...
	}
	catch(예외 타입 객체) {
		코드들
		...
	}
(3) 예외 계층도
	Throwable
		Error
		Exception
			RuntimeException
15. IO(Input Output)
(1) Stream
	1) 단방향
	2) 원칙적으로 순차적
	3) 지연(blocking) 발생 가능
	4) 어떤 장치를 사용하던 간에 사용법은 거의 동일
(2) java.io -> java.nio
(3) 자바에서 구현한 Stream 클래스
원래는 자바는 바이트스트림을 사용. 캐릭터스트림을 써도 자바 내부에서 바이트 스트림으로 변환해서 씀
	1) ByteStream : 1바이트씩 데이터를 쪼개서 주고받는 스트림 (1바이트로 쪼개도 상관 없는)
		InputStream : read()
		OutputStream : write()
		--------------------------
		- 파일 입출력 : FileInputStream, FileOutputStream
		- 이진데이터 입출력 : DataInputStream, DataOutputStream
		- 임의 접근 : RandomAccessFile
		- 객체 입출력 : ObjectInputStream, ObjectOutputStream
	2) CharacterStream(문자 기반 스트림) : 데이터를 2바이트씩 주고받는 스트림 (wrapper)
		Reader : read()
		Writer : write()
	3) PrintStream
		PrintWriter
16. Thread
하나의 프로세스 안에서 각각 실행되는 작업의 단위
(1) 프로그램 vs 프로세스(프로그램이 실행되고 있는 상태) (프로세서: CPU)
	1) Multi Process : 하나의 프로그램이 여러 개 실행되거나 두개 이상 다수의 프로세서(CPU)가 협력적으로 하나 이상의 작업을 동시에 처리하는 것이다. (병렬처리)
	2) Multi Thread : 다중 작업, 동시성
(2) 모든 프로그램은 반드시 기본적으로 한 개의 스레드를 가지고 있다
	- main()
(3) 스레드 생성 방법
	1) Thread 클래스
		Thread 클래스를 상속받으면 다른 클래스를 상속받을 수 없음
	2) Runnable 인터페이스
		1개의 메소드 만 갖는 함수형 인터페이스
		재사용성이 높고 코드의 일관성을 유지
(4) LifeCycle
(5) 스레드의 강제 종료
	1) stop() // 바로 종료. 가급적이면 사용 안함
	2) interrupt() // stop보다는 약간 텀을 줌
	3) 직접 제어(flag) // 표시를 해서 가장 문제가 없을 시점에 끝냄. 내가 조정
(6) 스레드의 종료 시점
	1) isAlive()
	2) join()
(7) 동기화
	동기화 상태일때에는 sleep 대신 wait
	1) synchronized
	2) 처리 방법
		- method
		- block
			synchronized(인스턴스 주소){
				코드
			}