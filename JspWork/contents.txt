WEB PROGRAMMING
==================
1. 준비 사항
(1) 웹 서버
	- IIS, Apache, Tomcat, NginX, ...
	- WebSphere, WebLogic, Jeus, JBoss, ... (WAS 라고 함)
(2) 웹 프로젝트
	프로젝트 폴더
		WEB-INF
			classes
			lib
			web.xml
(3) 내가 만든 웹 페이지를 톰캣을 통해 실행
	1) Tomcat 폴더의 webapps 폴더에 프로젝트 폴더를 복사
	2) Tomcat 폴더의 conf폴더에 있는 server.xml에 프로젝트 위치 등록
		<Context path="접속 경로" docBase="실제 프로젝트 경로" workDir="워크 스페이스"/>
2. 서블릿(Servlet)
https://javaee.github.io/javaee-spec/javadocs/javax/servlet/package-summary.html
(1) 특징
	1) 자바로 만든 application(서버에서만 실행)
	2) 클라이언트와 소통 (= 네트워크)
	3) 별도의 라이브러리가 필요 : servlet-api.jar
	4) javax.servlet.HttpServlet을 상속받아 작성
		protected void	doGet(HttpServletRequest req, HttpServletResponse resp)
		protected void	doPost(HttpServletRequest req, HttpServletResponse resp)

		※ web.xml
		<servlet-name>에는 변수이름
		<servlet-class>에는 클래스 이름
		<servlet-mapping> : 일반 사용자가 어떻게 연결하게 하는지 지정해주는 부분
(2) 서블릿을 구성하는 3대 클래스
※ HTTP : HTML을 이용해 웹에서 주고 받을 수 있는 통신 규약
※ 데이터를 보낼 때 한 번에 보내지 않고 나눠서 조각조각 보냄 (한 조각이 잘 못 됐을 때 그 조각만 다시 보냄) 여기서 그 조각을 패킷이라고 말함
※ HttpServletRequest : 사용자가 정보를 받게 해주는 클래스
※ HttpServletResponse : 사용자가 정보를 보낼 떄 포장해주는 클래스
※ resp.getWriter(); : 사용자에게 정보를 보낼 수 있게 객체를 전달시키는 용도
	1) HttpServlet <- GenericServlet <- Servlet
	2) HttpServletRequest <- ServletReqeust
	3) HttpServletResponse <- ServletResponse
(3) 요청(request) 방식
	1) GET
		- 하이퍼링크 전송 방식, URL전송 방식
		- 전송 방식이 다양
		- 기본 전송 방식
		- 소량의 데이터 전송
		- 전송되는 데이터가 노출
		- 조회 목적
			<form method="get" action="/servlet2/test1">
				<input type="submit" value="폼 전송" />
			</form>
			에서 method 부분을 생략하면 get방식으로 
	2) POST
		- 폼 전송 방식
		- 전송방식이 단 한가지
		- 대량의 데이터 전송
		- 전송되는 데이터가 노출되지 않음
		- 데이터 변경 목적
(4) 데이터를 가져오는 메서드
	1) String getParameter(String name)
	2) String[] getParameterValues()
	3) java.util.Enumeration<String> getParameterNames()
	4) java.util.Map<String, String[]> getParameterMap()
(5) LifeCycle
	1) init() : 처음에 서블릿 객체가 호출 될 때 생성되는 메서드
		서블릿 객체는 단 하나만 생성.
		두 번째로 접속하면 Service() 메서드 호출
	2) service()
		service(){
			if(get방식으로 요청){
				doGet();
			} else if(post방식으로 요청){
				doPost();
			}
			...
		}
	3) destroy()
		서버가 종료될 때 호출
(6) header 정보 가져오기
(7) 웹 프로그래밍에서 중요한 기술 2가지
	1) 페이지 이동 기술
		- Front End
			<a href=""> </a>
			<meta>
			location.href
			history
		- Back End(Server)
			...
	2) Data Persistance
		- Cookie
			클라이언트 측 기술
				자기 컴퓨터로만 해야 정보가 저장돼있음
			텍스트만 저장
			4kb
			만료 기간
		- Session
			서버측 기술
				어느 컴퓨터로 접속해도 정보가 저장돼있음
	※ http : 비연결 지향성
		연결 지향성 : 미리 선로를 깔아놓고 데이터를 주고받는 방식 
			- 데이터를 안정성 있게 주고 받을 수 있음
			- TCP/IP
		비연결 지향성 : 필요할 때만 연결을 해서 주고받는 방식
(8) 기본 문서 지정

(9) 배포
===========================================================
3. JSP(Java Server Page)
(1) 클라이언트 코드와 자바 코드를 한 페이지 내에 작성 가능
	- HTML 안에 Java코드를 포함시키는 방법
	- .jsp로 저장
(2) ScriptElement : HTML 안에 Java코드를 포함시키기 위한 도구
	1) <%! ... %> : Declaration(선언부)
	2) <% ... %> : Scriptlet(처리부)
	3) <%= ... %> : Expression(표현부)
(3) Directive : 지시를 내리기 위한 도구
	<%@page 속성들.. %>
	<%@include file="" %>
	<%@taglib 속성들.. %>	
(4) Implicit Object
	-- 입출력 관련
	1) request : HttpServletRequest
	2) response : HttpServletResponse
	3) out : javax.servlet.jsp.JspWriter
			PrintWriter out = resp.getWriter();
			
	-- 서블릿 관련
	4) page
	5) config
	
	-- context 관련
	- 전역변수 (가장 작은 범위)pageContext - request - session - application(가장 넓은 범위)
	6) session : HttpSession (세션 하나 자체가 프로젝트랑 똑같은 형태임) 프로젝트 내 어디에서든 꺼냈다가 뺄 수 있음. 접속한사용자만. 서로 다른 파일이여도 상관 없음. 최대한 안전하게 사용 가능. (사용자마다 메모리가 만들어짐), 클라이언트가 접속 할 때 세션 메모리 생성. 사용자가 아무런 동작을 하지 않았을 때(웹서버가 관리하는 시간) 객체 소멸, 접속을 끊었을 때
	7) application : javax.servlet.ServletContext (처음 시작할 때만 공동 메모리가 만들어짐) 가장 오랫동안 쓸 수 있음. 웹 프로젝트 하나당 하나의 공간 (모든 사용자가 모든 범위에서 공유), 서버가 사용 가동 될 때 객체 생성, 서버가 종료할 때 객체 소멸
	- 지역변수
	8) pageContext : 하나의 페이지에서 사용. 페이지 이동할 때 객체 소멸. 범위는 좁지만 가장 강력함. 나머지를 제어하는 기능을 갖고 있음
	request : 요청, 응답 페이지에서 사용 가능 (요청을 할 때 객체 생성) (응답을 받았을 때 객체 소멸)
	------------------------
		setAttribute("속성명", 값)
		getAttrubute("속성명")
		removeAttribute("속성명")
	-- 예외 처리
	9) exception
	
	※ 데이터 유효성 체크
		- 클라이언트 체크
		- 서버 체크
(5) ActionTag
	1) Standard Action Tag : <jsp:태그명></jsp:태그명>
		- <jsp:useBean> </jsp:useBean>
		- <jsp:setProperty>
		- <jsp:getProperty>
		- <jsp:forward>
		- <jsp:include>
		- <jsp:params>, <jsp:param>
	2) 사용자 정의 태그(Custom Action Tag)
	3) JSTL
	4) 페이지 이동 기 술
		- HTML
			<a href="">
			<meta>
		- Javascript
			location
			history
		- Java
			response.sendRedirect()
			<%@ errorPage=""%>
			<jsp:include>
			<jsp:forward>
		- 클라이언트측 이동기술
			<a href="">
			<meta>
			location
			history
			response.sendRedirect()
		- 서버측 이동기술
			<%@ errorPage=""%>
			<jsp:include>
			<jsp:forward>
(6) Java Beans
	- 자바로 만들어진 소프트웨어 컴퍼넌트. 즉, 자바빈API 규약을 따르는 컴퍼넌트
	- 어떤 데이터를 저장하고있는가
	- 똑같은 클래스인데 사용하는 방법이 메서드 위주가 아닌 변수위주 인 것
	빈은 jsp와 소통, 서블릿은 클라이언트와 소통
	- 클래스를 만들 때 반드시 패키지 생성
	- Bean Tag
		- <jsp:useBean> </jsp:useBean> : 인스턴스 생성 또는 객체 참조
		- <jsp:setProperty> : set 메서드. setProperty는 반드시 void, 매개변수 있어야 함
			setProperty에 메개변수에 값을 전달할 때 : value(미리 정해진 값), param(formTag안에 있는 값을 전달할 때) : defalut
		- <jsp:getProperty> : get 메서드. 리턴 있어야하고 매개변수 없어야 함 (property에는 get 생략 후 메서드이름을 소문자로)
	- scope (영역 설정)
		- page
		- request
		- session
		- application
	- Index Property
(7) DB 연동
	1) JDBC
		- 드라이버 준비 : mvnrepository.com
		- 표준 API
			Connection
			Statement 대신, PreparedStatement 사용
			ResultSet
(8) EL