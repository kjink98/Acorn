WEB PROGRAMMING
==================
1. 준비 사항
(1) 웹 서버
	- IIS, Apache, Tomcat, NginX, ...
	- WebSphere, WebLogic, Jeus, JBoss, ... (WAS 라고 함)
(2) 웹 프로젝트
	프로젝트 폴더
		WEB-INF
			classes
			lib
			web.xml
(3) 내가 만든 웹 페이지를 톰캣을 통해 실행
	1) Tomcat 폴더의 webapps 폴더에 프로젝트 폴더를 복사
	2) Tomcat 폴더의 conf폴더에 있는 server.xml에 프로젝트 위치 등록
		<Context path="접속 경로" docBase="실제 프로젝트 경로" workDir="워크 스페이스"/>
2. 서블릿(Servlet)
https://javaee.github.io/javaee-spec/javadocs/javax/servlet/package-summary.html
(1) 특징
	1) 자바로 만든 application(서버에서만 실행)
	2) 클라이언트와 소통 (= 네트워크)
	3) 별도의 라이브러리가 필요 : servlet-api.jar
	4) javax.servlet.HttpServlet을 상속받아 작성
		protected void	doGet(HttpServletRequest req, HttpServletResponse resp)
		protected void	doPost(HttpServletRequest req, HttpServletResponse resp)

		※ web.xml
		<servlet-name>에는 변수이름
		<servlet-class>에는 클래스 이름
		<servlet-mapping> : 일반 사용자가 어떻게 연결하게 하는지 지정해주는 부분
(2) 서블릿을 구성하는 3대 클래스
※ HTTP : HTML을 이용해 웹에서 주고 받을 수 있는 통신 규약
※ 데이터를 보낼 때 한 번에 보내지 않고 나눠서 조각조각 보냄 (한 조각이 잘 못 됐을 때 그 조각만 다시 보냄) 여기서 그 조각을 패킷이라고 말함
※ HttpServletRequest : 사용자가 정보를 받게 해주는 클래스
※ HttpServletResponse : 사용자가 정보를 보낼 떄 포장해주는 클래스
※ resp.getWriter(); : 사용자에게 정보를 보낼 수 있게 객체를 전달시키는 용도
	1) HttpServlet <- GenericServlet <- Servlet
	2) HttpServletRequest <- ServletReqeust
	3) HttpServletResponse <- ServletResponse
(3) 요청(request) 방식
	1) GET
		- 하이퍼링크 전송 방식, URL전송 방식
		- 전송 방식이 다양
		- 기본 전송 방식
		- 소량의 데이터 전송
		- 전송되는 데이터가 노출
		- 조회 목적
			<form method="get" action="/servlet2/test1">
				<input type="submit" value="폼 전송" />
			</form>
			에서 method 부분을 생략하면 get방식으로 
	2) POST
		- 폼 전송 방식
		- 전송방식이 단 한가지
		- 대량의 데이터 전송
		- 전송되는 데이터가 노출되지 않음
		- 데이터 변경 목적
(4) 데이터를 가져오는 메서드
	1) String getParameter(String name)
	2) String[] getParameterValues()
	3) java.util.Enumeration<String> getParameterNames()
	4) java.util.Map<String, String[]> getParameterMap()
(5) LifeCycle
	1) init() : 처음에 서블릿 객체가 호출 될 때 생성되는 메서드
		서블릿 객체는 단 하나만 생성.
		두 번째로 접속하면 Service() 메서드 호출
	2) service()
		service(){
			if(get방식으로 요청){
				doGet();
			} else if(post방식으로 요청){
				doPost();
			}
			...
		}
	3) destroy()
		서버가 종료될 때 호출
(6) header 정보 가져오기
(7) 웹 프로그래밍에서 중요한 기술 2가지
	1) 페이지 이동 기술
		- Front End
			<a href=""> </a>
			<meta>
			location.href
			history
		- Back End(Server)
			...
	2) Data Persistance
		- Cookie
			클라이언트 측 기술
				자기 컴퓨터로만 해야 정보가 저장돼있음
			텍스트만 저장
			4kb
			만료 기간
		- Session
			서버측 기술
				어느 컴퓨터로 접속해도 정보가 저장돼있음
	※ http : 비연결 지향성
		연결 지향성 : 미리 선로를 깔아놓고 데이터를 주고받는 방식 
			- 데이터를 안정성 있게 주고 받을 수 있음
			- TCP/IP
		비연결 지향성 : 필요할 때만 연결을 해서 주고받는 방식