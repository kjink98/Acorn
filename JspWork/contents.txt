WEB PROGRAMMING
==================
1. 준비 사항
(1) 웹 서버
	- IIS, Apache, Tomcat, NginX, ...
	- WebSphere, WebLogic, Jeus, JBoss, ... (WAS 라고 함)
(2) 웹 프로젝트
	프로젝트 폴더
		WEB-INF
			classes
			lib
			web.xml
(3) 내가 만든 웹 페이지를 톰캣을 통해 실행
	1) Tomcat 폴더의 webapps 폴더에 프로젝트 폴더를 복사
	2) Tomcat 폴더의 conf폴더에 있는 server.xml에 프로젝트 위치 등록
		<Context path="접속 경로" docBase="실제 프로젝트 경로" workDir="워크 스페이스"/>
2. 서블릿(Servlet)
https://javaee.github.io/javaee-spec/javadocs/javax/servlet/package-summary.html
(1) 특징
	1) 자바로 만든 application(서버에서만 실행)
	2) 클라이언트와 소통 (= 네트워크)
	3) 별도의 라이브러리가 필요 : servlet-api.jar
	4) javax.servlet.HttpServlet을 상속받아 작성
		protected void	doGet(HttpServletRequest req, HttpServletResponse resp)
		protected void	doPost(HttpServletRequest req, HttpServletResponse resp)

		※ web.xml
		<servlet-name>에는 변수이름
		<servlet-class>에는 클래스 이름
		<servlet-mapping> : 일반 사용자가 어떻게 연결하게 하는지 지정해주는 부분
(2) 서블릿을 구성하는 3대 클래스
※ HTTP : HTML을 이용해 웹에서 주고 받을 수 있는 통신 규약
※ 데이터를 보낼 때 한 번에 보내지 않고 나눠서 조각조각 보냄 (한 조각이 잘 못 됐을 때 그 조각만 다시 보냄) 여기서 그 조각을 패킷이라고 말함
※ HttpServletRequest : 사용자가 정보를 받게 해주는 클래스
※ HttpServletResponse : 사용자가 정보를 보낼 떄 포장해주는 클래스
※ resp.getWriter(); : 사용자에게 정보를 보낼 수 있게 객체를 전달시키는 용도
	1) HttpServlet <- GenericServlet <- Servlet
	2) HttpServletRequest <- ServletReqeust
	3) HttpServletResponse <- ServletResponse
(3) 요청(request) 방식
	1) GET
		- 하이퍼링크 전송 방식, URL전송 방식
		- 전송 방식이 다양
		- 기본 전송 방식
		- 소량의 데이터 전송
		- 전송되는 데이터가 노출
		- 조회 목적
			<form method="get" action="/servlet2/test1">
				<input type="submit" value="폼 전송" />
			</form>
			에서 method 부분을 생략하면 get방식으로 
	2) POST
		- 폼 전송 방식
		- 전송방식이 단 한가지
		- 대량의 데이터 전송
		- 전송되는 데이터가 노출되지 않음
		- 데이터 변경 목적
(4) 데이터를 가져오는 메서드
	1) String getParameter(String name)
	2) String[] getParameterValues()
	3) java.util.Enumeration<String> getParameterNames()
	4) java.util.Map<String, String[]> getParameterMap()
(5) LifeCycle
	1) init() : 처음에 서블릿 객체가 호출 될 때 생성되는 메서드
		서블릿 객체는 단 하나만 생성.
		두 번째로 접속하면 Service() 메서드 호출
	2) service()
		service(){
			if(get방식으로 요청){
				doGet();
			} else if(post방식으로 요청){
				doPost();
			}
			...
		}
	3) destroy()
		서버가 종료될 때 호출
(6) header 정보 가져오기
(7) 웹 프로그래밍에서 중요한 기술 2가지
	1) 페이지 이동 기술
		- Front End
			<a href=""> </a>
			<meta>
			location.href
			history
		- Back End(Server)
			...
	2) Data Persistance
		- Cookie
			클라이언트 측 기술
				자기 컴퓨터로만 해야 정보가 저장돼있음
			텍스트만 저장
			4kb
			만료 기간
		- Session
			서버측 기술
				어느 컴퓨터로 접속해도 정보가 저장돼있음
	※ http : 비연결 지향성
		연결 지향성 : 미리 선로를 깔아놓고 데이터를 주고받는 방식 
			- 데이터를 안정성 있게 주고 받을 수 있음
			- TCP/IP
		비연결 지향성 : 필요할 때만 연결을 해서 주고받는 방식
(8) 기본 문서 지정

(9) 배포
===========================================================
3. JSP(Java Server Page)
(1) 클라이언트 코드와 자바 코드를 한 페이지 내에 작성 가능
	- HTML 안에 Java코드를 포함시키는 방법
	- .jsp로 저장
(2) ScriptElement : HTML 안에 Java코드를 포함시키기 위한 도구
	1) <%! ... %> : Declaration(선언부)
	2) <% ... %> : Scriptlet(처리부)
	3) <%= ... %> : Expression(표현부)
(3) Directive : 지시를 내리기 위한 도구
	<%@page 속성들.. %>
	<%@include file="" %>
	<%@taglib 속성들.. %>	
(4) Implicit Object
	-- 입출력 관련
	1) request : HttpServletRequest
	2) response : HttpServletResponse
	3) out : javax.servlet.jsp.JspWriter
			PrintWriter out = resp.getWriter();
			
	-- 서블릿 관련
	4) page
	5) config
	
	-- context 관련
	- 전역변수 (가장 작은 범위)pageContext - request - session - application(가장 넓은 범위)
	6) session : HttpSession (세션 하나 자체가 프로젝트랑 똑같은 형태임) 프로젝트 내 어디에서든 꺼냈다가 뺄 수 있음. 접속한사용자만. 서로 다른 파일이여도 상관 없음. 최대한 안전하게 사용 가능. (사용자마다 메모리가 만들어짐), 클라이언트가 접속 할 때 세션 메모리 생성. 사용자가 아무런 동작을 하지 않았을 때(웹서버가 관리하는 시간) 객체 소멸, 접속을 끊었을 때
	7) application : javax.servlet.ServletContext (처음 시작할 때만 공동 메모리가 만들어짐) 가장 오랫동안 쓸 수 있음. 웹 프로젝트 하나당 하나의 공간 (모든 사용자가 모든 범위에서 공유), 서버가 사용 가동 될 때 객체 생성, 서버가 종료할 때 객체 소멸
	- 지역변수
	8) pageContext : 하나의 페이지에서 사용. 페이지 이동할 때 객체 소멸. 범위는 좁지만 가장 강력함. 나머지를 제어하는 기능을 갖고 있음
	request : 요청, 응답 페이지에서 사용 가능 (요청을 할 때 객체 생성) (응답을 받았을 때 객체 소멸)
	------------------------
		setAttribute("속성명", 값)
		getAttrubute("속성명")
		removeAttribute("속성명")
	-- 예외 처리
	9) exception
	
	※ 데이터 유효성 체크
		- 클라이언트 체크
		- 서버 체크
(5) ActionTag
	1) Standard Action Tag : <jsp:태그명></jsp:태그명>
		- <jsp:useBean> </jsp:useBean>
		- <jsp:setProperty>
		- <jsp:getProperty>
		- <jsp:forward>
		- <jsp:include>
		- <jsp:params>, <jsp:param>
	2) 사용자 정의 태그(Custom Action Tag)
	3) JSTL
	4) 페이지 이동 기 술
		- HTML
			<a href="">
			<meta>
		- Javascript
			location
			history
		- Java
			response.sendRedirect()
			<%@ errorPage=""%>
			<jsp:include>
			<jsp:forward>
		- 클라이언트측 이동기술
			<a href="">
			<meta>
			location
			history
			response.sendRedirect()
		- 서버측 이동기술
			<%@ errorPage=""%>
			<jsp:include>
			<jsp:forward>
(6) Java Beans
	- 자바로 만들어진 소프트웨어 컴퍼넌트. 즉, 자바빈API 규약을 따르는 컴퍼넌트
	- 어떤 데이터를 저장하고있는가
	- 똑같은 클래스인데 사용하는 방법이 메서드 위주가 아닌 변수위주 인 것
	빈은 jsp와 소통, 서블릿은 클라이언트와 소통
	- 클래스를 만들 때 반드시 패키지 생성
	- Bean Tag
		- <jsp:useBean> </jsp:useBean> : 인스턴스 생성 또는 객체 참조
		- <jsp:setProperty> : set 메서드. setProperty는 반드시 void, 매개변수 있어야 함
			setProperty에 메개변수에 값을 전달할 때 : value(미리 정해진 값), param(formTag안에 있는 값을 전달할 때) : defalut
		- <jsp:getProperty> : get 메서드. 리턴 있어야하고 매개변수 없어야 함 (property에는 get 생략 후 메서드이름을 소문자로)
	- scope (영역 설정)
		- page
		- request
		- session
		- application
	- Index Property
(7) DB 연동
	1) JDBC (Java DateBase Connectivity)
		- 드라이버 준비 : mvnrepository.com
		- 표준 API
			Connection
			Statement 대신, PreparedStatement 사용
			ResultSet
	2) DBCP (DataBase Connection Pool)
		- 지속적인 연결 시도(성능부분의 악화 초래)
		- 중복된 코드
		- 구현 방법
			- 직접 작성
			- 외부 라이브러리
			- WAS에서 제공
	3) JNDI(Java Naming and Directory Interface)
		- 디렉터리 서비스에서 제공하는 데이터 및 객체를 발견하고 참고하기 위한 자바 API
(8) EL, JSTL
	1) EL(Expression Language)
		<% out.println(...); %>
		<%= ... %>
		<jsp:getProperty .../>
		
		${ 식 }
			- 식
				attribute 명
				bean 또는 map
				EL 내장 객체
				객체.프로퍼티 또는 객체[프로퍼티]
			- 내장 객체
				pageScope
				requestScope
				sessionScope
				applicationScope
				
				param
				paramValues
				
				header
				headerValues
				
				cookie
				initParam
				
				pageContext
	2) JSTL (Jsp Standard Tag Library)
		- 역할 및 특징
			EL 이나 표준 ActionTag으로 처리하기 힘든 부분 담당
			연산, 조건, 반복 등
		- 구분	
			1)Core
				- 관례적으로 prefix는 c
				- 일반 프로그래밍에서 제공하는 것과 유사한 변수 선언, 실행 흐름의 제어 기능을 제공
				- 페이지 이동 기술 제공(redirect, import, url)
				- uri:http://java.sun.com/jsp/jstl/core
			2)Formatting
				- 관례적으로 prefix는 fmt
				- 숫자, 날짜, 시간을 포맷팅하는 기능과 국제화, 다국어 기능을 제공 
				- uri:http://java.sun.com/jsp/jstl/fmt
			3)Database
				- DB의 데이터를 수정/삭제/삽입/입력/조회하는 기능을 제공
				- uri:http://java.sun.com/jsp/jstl/sql
			4)XML
				- XML문서를 처리할 때 필요한 기능을 제공
				- uri:http://java.sun.com/jsp/jstl/xml
			5)Function
				- 문자열을 처리하는 함수를 제공
				- uri:http://java.sun.com/jsp/jstl/fn
		- 라이브러리
			jstl.jar, standardjar > taglibs-standard-impl-1.2.5.jar, taglibs-standard-spec-1.2.5.jar
4. BootStrap
(1) UI 프레임워크
(2) html, css, javascript
(3) 버전
	1) 1.x : desktop
	2) 2.x : desktop 위주, mobile
	3) 3.x : mobile 위주
	4) 4.x
	5) 5.x
(4) https://getbootstrap.com
(5) 반응형 웹
5. MVC 패턴 : Model View Controller
	(1) Model1 Archetecture : jsp
	(1) Model2 Archetecture : mvc
5. AJAX (Asynchronous Javascript And Xml)
(1) 비동기 처리 방식
	클라이언트 사이드 렌더링 : 서버에서 데이터만 클라이언트에게 줌
(2) 선수 기술
	1) html, css, javascript
	2) xml, json
	3) XMLHttpRequest
(3) onreadystatechange
		- readystate
			0(uninitialize) : 객체만 생성되고 아직 초기화가 안된 상태
			1(loading) : open()이 호출되고 아직 send()까지는 호출되지 않은 상태
			2(loaded) : send()가 호출되고 서버로부터 status와 헤더정보는 아직 도착하지 않은 상태
			3(Interactive) : 서버로부터 데이터의 일부만 받은 상태
			4(complete) : 서버로부터 데이터를 전부 받은 상태

		- status
			200 : OK
			403 : Forbidden 접근 거부
			404 : not found
			500 : Internal Server error
			....
(4) XML
	1) Extensible Markup Language
	2) 메타 언어
	3) 용도
		- DB
		- 데이터의 표준화
		(이기종 시스템간의 정보교환, 웹서비스, 유비쿼터스등)

	4) HTML과 XML
		<h1>데이터</h1>
		<age>데이터</age>

	5) 문법
		- DTD
		- xml 스키마
		- XSL

	6) xml문서 종류
		- well-formed xml document
		- valid xml document

	7) XML문서의 구조
		Prologue - 1개
		Element - 1개
		Misc - 0개 이상

	8) Element
		- 작성 문법
			모든 xml문서는 반드시 단 하나의 루트 엘리먼트를 갖는다.
			루트는 여러개의 자식 엘리먼트를 가질 수 있고 또 그 자식도 자신의 자식을 가질 수 있다.

		- 종류
			내용을 가지는 엘리먼트
			내용이 없는 엘리먼트

		- 작성 규칙
			시작태그와 끝태그는 반드시 짝을 이루어야 한다.
			"<"는 값으로 사용불가
			엘리먼트는 중첩되어 사용될 수 없다.

		- 태그명 작성 규칙
			이름은 문자로 시작하고 첫번째 문자로 특수문자 중에 "_"로 시작 가능
			태그명에 공백 불가
			특수문자중에서 "."은 사용가능하나 가급적 쓰지말자
			태그명은 대소문자 구별
			태그명은 xml로 시작불가

		- 엘리먼트의 내용
			문자 데이터
			자식 엘리먼트
			엔티티 또는 문자 참조
			CDATA section
			프로세싱 지시자
			주석
			공백

	9) DTD
		- 종류
			내부 DTD
			외부 DTD

		- 구성요소
			엘리먼트 선언
			속성(Attribute) 선언
			Entity 선언
			Notation 선언
			프로세싱 지시자
			파라미터 엔티티 참조
			주석
			공백
			Conditional Section

		- 문서 유형 선언
			<!DOCTYPE 루트엘리먼트 SYSTEM 또는 PUBLIC "식별자">
			+-//dtd를 개발 및 유지보수 업체명//DTD명 및 버전번호//사용된 언어

		- 엘리먼트 선언
			<!ELEMENT 이름 컨텐트유형>
			컨텐트 유형
			#PCDATA : 내용으로 문자데이터만 갖는다.
			자식엘리먼트
			,
			|
			?
			+
			*
			기호없음
			EMPTY
			MIXED : 문자 또는 자식엘리먼트
			ANY

		- Attribute 선언
			<!ATTLIST 엘리먼트명 속성명 속성유형 디폴트>
			속성 유형
			CDATA : 문자 데이터
			ENUMERATION : dtd에 나열된 값 중 하나가 와야 함
			ID : 유일한 값을 지정
			IDREF/IDRFES : ID값을 참조
			NMTOKEN/NMTOKENS : 이름 작성 규칙을 준수하는 데이터만 사용
			NOTATION : dtd에 명시적으로 선언된 notation명만 사용 가능
			ENTITY : dtd에 명시적으로 선언된 entity만 사용 가능


	10) JAVA
		- DOM
		- SAX