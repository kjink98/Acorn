1. 데이터베이스 & DBMS
	- 방대한 데이터를 효율적으로 관리하기 위해 컴퓨터에 통합, 저장한 것
	- 특정 조직의 여러 사용자가 공유하여 사용할 수 있도록 통합해서 저장한 운영 데이터의 집합
	- 데이터베이스 관리 시스템이라는 프로그램을 이용하여 관리
	(1) DB에 저장된 데이터의 특징
		1) 공유 데이터(Shared Data)
		2) 통합 데이터(Integrated Data)
			- 최소의 중복과 통제 가능한 중복만 허용하는 데이터
		3) 저장 데이터(Stored Data)
		4) 운영 데이터(Operational Data)
	
	(2) 운영 방식
		1) 로컬 DB
			- Access, sqllite, ...
		2) 네트워크 DB
			- Oracle, SqlServer, DB2, MySQL, MariaDB, Informix, ...
	(3) 학습 대상
		1) Administrator
		2) Devoloper
	(4) 저장 형태에 따른 구분
		1) 계층형 DB(HDB) - tree // 트리형 구조로 하는데 데이터가 많으면 너무 무거움
		2) 네트워크형 DB(NDB) - graph // 계층형 구조에서 끊어진 연결을 다 이어주는 건데 실제로 구현하기엔 너무 어려움
		3) 관계형 DB(RDB) - table(*) // 테이블형태로 저장
		4) 객체 지향형 DB // 어렵다
		5) 객체 관계형 DB
		
		※ 저장 단위
		필드(컬럼, 속성) < 레코드(튜플) < 테이블(파일) < DB
	(5) 용어
		1) Data Persistence
		2) Dataware House : 정보에 입각한 의사 결정을 내릴 수 있도록 분석 가능한 정보의 레포지토리
		3) Data Mining : 대규모로 저장된 데이터 안에서 체계적이고 자동적으로 통계적 규칙이나 패턴을 찾아내는 것
2. DBMS 설치
	(1) 제어판 - 서비스 확인
	(2) 원격 접속 프로그램(클라이언트 유틸리티)
		1) 무료 : Sqldeveloper(윈도우), Sqlplus(콘솔), ...
		2) 유료 : Toad, Sqlgate, ...
	(3) Sqlplus
		1) 접속
			sqlplus
			아이디:
			패스워드:
			
			sqlplus 사용자id/패스워드
			
			sqlplus 사용자id
			패스워드:
			
			// 다른 사람 거에 접속할 때 (ip나 도메인)
			sqlplus 사용자id/패스워드@host명
			
			// 접속을 끊지 않은 상태에서 다른 사용자 접속
			conn 아이디/패스워드
	(4) Sample 계정 : scott
		- @C:\oraclexe\app\oracle\product\11.2.0\server\rdbms\admin
		- alter user scott identified by 1111;
	(5) 계정 관리
		- 사용자 test1 추가
			create user test1 identified by 1111;
		- 사용할 수 있는 테이블 조회
		select * from tab;
		- 접속 권한 부여
			관리자 접속
			grant connect to test1;
		- 관리자 비번 분실
			system as sysdba
3. SQL(Structured Query Language)
- 관계형 데이터베이스의 조작과 관리에 사용되는 데이터베이스 질의용 언어
- 원하는 데이터가 무엇인지만 기술하는 비절차적 언어
- 인터프리터 방식(JavaScript) <-> 컴파일(여러 줄을 모아 한 번에 실행. C언어, JAVA)
	(1) SQL 분류
		1) DDL (Data Definition Language)
			- 데이터 정의어
			- 데이터베이스 개체를 생성/삭제/변경하는 역할
			- CREATE, DROP, ALTER
		2) DML (Data Manipulation Language)
			- 데이터 조작어
			- DB의 기본 연산인 CRUD를 할 수 있는 언어
			- INSERT, UPDATE, DELETE
		3) DCL (Data Control Language)
			- 데이터 제어어
			- DB를 관리(권한 부여, 권한 제거, 분산 처리, 백업, 복원, ...)
			- GRANT, REVOKE, ...
		4) QL (QUERY LANGUAGE)
			- SELECT
	(2) SELECT 문법
		SELECT * FROM tab;
		DESC 테이블명; (description)
		
		1) 기본 문법
			SELECT 필드명, ... FROM [소유자].테이블명
			--------------------------------------
			SELECT empno, ename, job, mgr FROM scott.emp;
			
			SELECT * FROM 테이블명;
			
			필드의 가공처리
			------------
			사원의 사번, 이름, 급여를 조회하시오.
			단, 급여는 현재 급여의 100$를 추가하여 조회
			SELECT empno, ename, sal, sal+100 FROM emp;
			
			필드의 alias 부여 가능
			필드명 별명 또는 필드명 AS 별명
			-------------------
			SELECT empno, ename, sal 급여, sal+100 AS "100$ 추가된 급여" FROM emp;
			
			중복된 값 제거 : distinct
			------------------------
			이 회사에 어떤 업무가 있는가?
			SELECT DISTINCT job FROM emp;
			
		2) 확장 문법
			- 정렬 기능
			ORDER BY 필드명[, 필드명, ...] [ASC | DESC]
			----------------------------------------
			급여가 많은 순으로 사번, 이름, 급여를 조회
			SELECT empno, ename, sal FROM emp ORDER BY sal DESC;
			
			부서별로 급여가 적은 순으로 이름, 급여, 부서번호를 조회
			SELECT ename 이름, sal 급여, deptno 부서번호 FROM emp ORDER BY deptno, sal;
			****************************************************************
			
			- 조건 기능(레코드 필터링)
			WHERE 조건식
			기본 연산자 : >, <, >=, <=, =, !=, <>, ^=
			논리 연산자 : and, or, not
			SQL 연산자 : between and, in, is null, is not null, like, ...
			------------------------------------------------------------
			*. 급여가 3000$ 이상인 직원의 사번, 이름, 급여를 조회. 단, 급여가 많은 순으로 조회
			SELECT empno, ename, sal FROM emp WHERE sal >= 3000 ORDER BY sal DESC;
			
			*. 업무가 manager인 사원의 이름, 부서번호, 업무, 급여를 조회
			SELECT ename, deptno, job, sal FROM emp WHERE job like 'MANAGER';
			
			*. 1982년 1월 1일 이후에 입사한 직원의 이름, 부서번호, 입사일자 조회
			SELECT ename, deptno, hiredate FROM emp WHERE hiredate > = '82/01/01';
			'82.01.01', '82,01,01', '82-01-01' 등 날짜 포멧만 갖추면 가능
			
			*. 부서번호가 20이고 업무가 analyst인 직원의 이름, 부서번호, 입사일자 조회
			SELECT ename, deptno, hiredate FROM emp WHERE deptno = 20 and job = 'ANALYST';
			
			*. 급여가 1500 이상 2500 이하를 받는 직원의 이름, 부서번호, 업무, 급여를 조회
			SELECT ename, deptno, job, sal FROM emp WHERE sal between 1500 and 2500;
			
			*. 업무가 clerk, salesman, analyst인 직원의 이름, 부서번호, 업무를 조회
			SELECT ename, deptno, job FROM emp WHERE job like 'CLERK' or job like 'SALESMAN' or job like 'ANALYST';
			
			SELECT ename, deptno, job FROM emp WHERE job in ('CLERK', 'SALESMAN', 'ANALYST');
			
			*. 직원의 이름, 부서번호, 업무, 급여, 보너스를 조회
			SELECT ename, deptno, job, sal, comm FROM emp;
			
			*. 커미션(보너스)이 없는 직원의 이름, 부서번호, 업무, 급여, 커미션을 조회
			SELECT ename, deptno, job, sal, comm FROM emp WHERE comm IS NULL;
			
			*. like 연산자
				% : 0개 이상의 문자를 대체
				_ : 1개의 문자를 대체
				----------------------------
				beau% : beau로 시작하는 모든 단어
				beau__ : beau로 시작하는 두 글자
			----------------------------------
			*. 이름이 s로 시작하는 직원의 이름, 업무, 급여를 조회
			SELECT ename, job, sal FROM emp WHERE ename like 'S%';
			
			***********************************************************
			- 그룹화
			GROUP BY 필드명 [, 필드명, ...] [HAVING 조건식]
			----------------------------------
			*. 부서별로 급여 평균, 급여 합계, 최저 급여, 최대 급여를 조회
			SELECT deptno 부서번호, AVG(sal) AS 급여평균, SUM(sal) AS 급여합계, MIN(sal) AS 최저급여, MAX(sal) AS 최대급여 FROM emp GROUP BY deptno ORDER BY deptno;

			*. 부서별로 급여평균, 최저급여를 조회. 단, 급여평균이 높은 순으로 조회
			SELECT deptno 부서번호, AVG(sal) AS 급여평균, MIN(sal) AS 최저급여 FROM emp GROUP BY deptno ORDER BY 급여평균 DESC;
			
			*. 전체 급여의 합계가 5000을 초과하는 업무에 대해 급여 합계 조회
			SELECT job 업무, SUM(sal) AS 급여합계 FROM emp GROUP BY job HAVING SUM(sal) > 5000;
			
			*. 전체 급여의 합계가 5000을 초과하는 업무에 대해 급여 합계 조회. 단, salesman은 제외
			SELECT job 업무, SUM(sal) AS 급여합계 FROM emp GROUP BY job HAVING SUM(sal) > 5000 and job != 'SALESMAN';
			SELECT job 업무, SUM(sal) AS 급여합계 FROM emp WHERE job != 'SALESMAN' GROUP BY job HAVING SUM(sal) > 5000;
			
	(3) Functions
		1) Single Row Function : 한 개의 데이터에 적용할 수 있는 함수
		https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Functions.html#GUID-D079EFD3-C683-441F-977E-2C9503089982
			- String Function
				lower(), upper()
				substr()
				length()
				instr()
				ltrim(), rtrim(), trim()
				translate(), replace()
				ascii(), chr()
				--------------------------------------
				*. 이름이 ford인 직원의 이름, 부서번호, 급여를 조회. 단, 대소문자 구별 없이 검색 할 수 엤도록 한다.
				SELECT ename, deptno, sal FROM emp WHERE ename = upper('FoRd');
				
				*. 다음 주민번호에서 성별에 해당하는 것을 추출해라.
				dual : 연습용 테이블
				SELECT substr('9012311234567', 7, 1) FROM dual; // 7번째 자리 한개만 가져옴
				SELECT substr('9012311234567', 7) FROM dual;
				
				*. 문자열의 위치
				SELECT instr('MILLER', 'L') FROM dual;
				SELECT instr('MILLER', 'K') FROM dual;
				SELECT instr('MILLER', 'L', 1, 1) FROM dual; // 첫 번째 위치에서 한 개만 가져옴 (생략가능) : 3
				SELECT instr('MILLER', 'L', 1, 2) FROM dual; // 두 번째 위치의 L을 1개 가져옴 : 4
				SELECT instr('MILLER', 'L', 4, 1) FROM dual; // 네 번째 위치의 L을 1개 가져옴 : 4
				*. 문자열의 재배치
				SELECT translate('MILLER', 'L', '*') FROM dual;
				SELECT replace('MILLER', 'L', '*') FROM dual;
				SELECT translate(sal, '0123456789', '영일이삼사오육칠팔구') FROM emp; // 0 > 영 1 > 일 .. 이런식으로 바꿈
				SELECT replace(sal, '0123456789', '영일이삼사오육칠팔구') FROM emp; // 0123456789 자체를 영일이삼사오육칠팔구로 바꿈
				SELECT translate('JACK and JUE', 'J', 'BL') FROM dual; // 한글자 한글자만 바꿔줌 L은 안 바뀜
				SELECT replace('JACK and JUE', 'J', 'BL') FROM dual; // J를 BL로 바꿔줌
			- Numeric Function
				round(), trunc(), floor(), ceil()
				mod()
				power()
				sign()
				--------------------------------------------
				*. 소수점 자리수
				SELECT round(4567.678), round(4567.678, 0) FROM dual; // 반올림
				SELECT round(4567.678, 2), round(4567.678, -2) FROM dual;
				
				SELECT trunc(4567.678), trunc(4567.678, 2) FROM dual; // 버림
				SELECT floor(4567.678) FROM dual; // 내림
				SELECT ceil(4567.478) FROM dual; // 올림
			- Datetime Function
			- Conversion Function
			- Etc...
		2) Aggregation Function : 여러개의 데이터에 적용할 수 있는 함수. 집계함수
		3) Analytic Function : 고급함수, 데이터 분석