1. 데이터베이스 & DBMS
	- 방대한 데이터를 효율적으로 관리하기 위해 컴퓨터에 통합, 저장한 것
	- 특정 조직의 여러 사용자가 공유하여 사용할 수 있도록 통합해서 저장한 운영 데이터의 집합
	- 데이터베이스 관리 시스템이라는 프로그램을 이용하여 관리
	(1) DB에 저장된 데이터의 특징
		1) 공유 데이터(Shared Data)
		2) 통합 데이터(Integrated Data)
			- 최소의 중복과 통제 가능한 중복만 허용하는 데이터
		3) 저장 데이터(Stored Data)
		4) 운영 데이터(Operational Data)
	
	(2) 운영 방식
		1) 로컬 DB
			- Access, sqllite, ...
		2) 네트워크 DB
			- Oracle, SqlServer, DB2, MySQL, MariaDB, Informix, ...
	(3) 학습 대상
		1) Administrator
		2) Devoloper
	(4) 저장 형태에 따른 구분
		1) 계층형 DB(HDB) - tree // 트리형 구조로 하는데 데이터가 많으면 너무 무거움
		2) 네트워크형 DB(NDB) - graph // 계층형 구조에서 끊어진 연결을 다 이어주는 건데 실제로 구현하기엔 너무 어려움
		3) 관계형 DB(RDB) - table(*) // 테이블형태로 저장
		4) 객체 지향형 DB // 어렵다
		5) 객체 관계형 DB
		
		※ 저장 단위
		필드(컬럼, 속성) < 레코드(튜플) < 테이블(파일) < DB
	(5) 용어
		1) Data Persistence
		2) Dataware House : 정보에 입각한 의사 결정을 내릴 수 있도록 분석 가능한 정보의 레포지토리
		3) Data Mining : 대규모로 저장된 데이터 안에서 체계적이고 자동적으로 통계적 규칙이나 패턴을 찾아내는 것
2. DBMS 설치
	(1) 제어판 - 서비스 확인
	(2) 원격 접속 프로그램(클라이언트 유틸리티)
		1) 무료 : Sqldeveloper(윈도우), Sqlplus(콘솔), ...
		2) 유료 : Toad, Sqlgate, ...
	(3) Sqlplus
		1) 접속
			sqlplus
			아이디:
			패스워드:
			
			sqlplus 사용자id/패스워드
			
			sqlplus 사용자id
			패스워드:
			
			// 다른 사람 거에 접속할 때 (ip나 도메인)
			sqlplus 사용자id/패스워드@host명
			
			// 접속을 끊지 않은 상태에서 다른 사용자 접속
			conn 아이디/패스워드
	(4) Sample 계정 : scott
		- @C:\oraclexe\app\oracle\product\11.2.0\server\rdbms\admin
		- alter user scott identified by 1111;
	(5) 계정 관리
		- 사용자 test1 추가
			create user test1 identified by 1111;
		- 사용할 수 있는 테이블 조회
		select * from tab;
		- 접속 권한 부여
			관리자 접속
			grant connect to test1;
		- 관리자 비번 분실
			system as sysdba
3. SQL(Structured Query Language)
- 관계형 데이터베이스의 조작과 관리에 사용되는 데이터베이스 질의용 언어
- 원하는 데이터가 무엇인지만 기술하는 비절차적 언어
- 인터프리터 방식(JavaScript) <-> 컴파일(여러 줄을 모아 한 번에 실행. C언어, JAVA
- 표준 문법(ANSI SQL), 비표준 문법
	(1) SQL 분류
		1) DDL (Data Definition Language)
			- 데이터 정의어
			- 데이터베이스 개체를 생성/삭제/변경하는 역할
			- CREATE, DROP, ALTER
		2) DML (Data Manipulation Language)
			- 데이터 조작어
			- DB의 기본 연산인 CRUD를 할 수 있는 언어
			- INSERT, UPDATE, DELETE
		3) DCL (Data Control Language)
			- 데이터 제어어
			- DB를 관리(권한 부여, 권한 제거, 분산 처리, 백업, 복원, ...)
			- GRANT, REVOKE, ...
		4) QL (QUERY LANGUAGE)
			- SELECT
	(2) SELECT 문법
		SELECT * FROM tab;
		DESC 테이블명; (description)
		
		1) 기본 문법
			SELECT 필드명, ... FROM [소유자].테이블명
			--------------------------------------
			SELECT empno, ename, job, mgr FROM scott.emp;
			
			SELECT * FROM 테이블명;
			
			필드의 가공처리
			------------
			*. 사원의 사번, 이름, 급여를 조회하시오.
			단, 급여는 현재 급여의 100$를 추가하여 조회
			SELECT empno, ename, sal, sal+100 FROM emp;
			
			필드의 alias 부여 가능
			필드명 별명 또는 필드명 AS 별명
			-------------------
			SELECT empno, ename, sal 급여, sal+100 AS "100$ 추가된 급여" FROM emp;
			
			중복된 값 제거 : distinct
			------------------------
			*. 이 회사에 어떤 업무가 있는가?
			SELECT DISTINCT job FROM emp;
			
		2) 확장 문법
			- 정렬 기능
			ORDER BY 필드명[, 필드명, ...] [ASC | DESC]
			----------------------------------------
			*. 급여가 많은 순으로 사번, 이름, 급여를 조회
			SELECT empno, ename, sal FROM emp ORDER BY sal DESC;
			
			*. 부서별로 급여가 적은 순으로 이름, 급여, 부서번호를 조회
			SELECT ename 이름, sal 급여, deptno 부서번호 FROM emp ORDER BY deptno, sal;
			****************************************************************
			
			- 조건 기능(레코드 필터링)
			WHERE 조건식
			기본 연산자 : >, <, >=, <=, =, !=, <>, ^=
			논리 연산자 : and, or, not
			SQL 연산자 : between and, in, is null, is not null, like, ...
			------------------------------------------------------------
			*. 급여가 3000$ 이상인 직원의 사번, 이름, 급여를 조회. 단, 급여가 많은 순으로 조회
			SELECT empno, ename, sal FROM emp WHERE sal >= 3000 ORDER BY sal DESC;
			
			*. 업무가 manager인 사원의 이름, 부서번호, 업무, 급여를 조회
			SELECT ename, deptno, job, sal FROM emp WHERE job like 'MANAGER';
			
			*. 1982년 1월 1일 이후에 입사한 직원의 이름, 부서번호, 입사일자 조회
			SELECT ename, deptno, hiredate FROM emp WHERE hiredate > = '82/01/01';
			'82.01.01', '82,01,01', '82-01-01' 등 날짜 포멧만 갖추면 가능
			
			*. 부서번호가 20이고 업무가 analyst인 직원의 이름, 부서번호, 입사일자 조회
			SELECT ename, deptno, hiredate FROM emp WHERE deptno = 20 and job = 'ANALYST';
			
			*. 급여가 1500 이상 2500 이하를 받는 직원의 이름, 부서번호, 업무, 급여를 조회
			SELECT ename, deptno, job, sal FROM emp WHERE sal between 1500 and 2500;
			
			*. 업무가 clerk, salesman, analyst인 직원의 이름, 부서번호, 업무를 조회
			SELECT ename, deptno, job FROM emp WHERE job like 'CLERK' or job like 'SALESMAN' or job like 'ANALYST';
			
			SELECT ename, deptno, job FROM emp WHERE job in ('CLERK', 'SALESMAN', 'ANALYST');
			
			*. 직원의 이름, 부서번호, 업무, 급여, 보너스를 조회
			SELECT ename, deptno, job, sal, comm FROM emp;
			
			*. 커미션(보너스)이 없는 직원의 이름, 부서번호, 업무, 급여, 커미션을 조회
			SELECT ename, deptno, job, sal, comm FROM emp WHERE comm IS NULL;
			
			*. like 연산자
				% : 0개 이상의 문자를 대체
				_ : 1개의 문자를 대체
				----------------------------
				beau% : beau로 시작하는 모든 단어
				beau__ : beau로 시작하는 두 글자
			----------------------------------
			*. 이름이 s로 시작하는 직원의 이름, 업무, 급여를 조회
			SELECT ename, job, sal FROM emp WHERE ename like 'S%';
			
			***********************************************************
			- 그룹화
			GROUP BY 필드명 [, 필드명, ...] [HAVING 조건식]
			----------------------------------
			*. 부서별로 급여 평균, 급여 합계, 최저 급여, 최대 급여를 조회
			SELECT deptno 부서번호, AVG(sal) AS 급여평균, SUM(sal) AS 급여합계, MIN(sal) AS 최저급여, MAX(sal) AS 최대급여 FROM emp GROUP BY deptno ORDER BY deptno;

			*. 부서별로 급여평균, 최저급여를 조회. 단, 급여평균이 높은 순으로 조회
			SELECT deptno 부서번호, AVG(sal) AS 급여평균, MIN(sal) AS 최저급여 FROM emp GROUP BY deptno ORDER BY 급여평균 DESC;
			
			*. 전체 급여의 합계가 5000을 초과하는 업무에 대해 급여 합계 조회
			SELECT job 업무, SUM(sal) AS 급여합계 FROM emp GROUP BY job HAVING SUM(sal) > 5000;
			
			*. 전체 급여의 합계가 5000을 초과하는 업무에 대해 급여 합계 조회. 단, salesman은 제외
			SELECT job 업무, SUM(sal) AS 급여합계 FROM emp GROUP BY job HAVING SUM(sal) > 5000 and job != 'SALESMAN';
			SELECT job 업무, SUM(sal) AS 급여합계 FROM emp WHERE job != 'SALESMAN' GROUP BY job HAVING SUM(sal) > 5000;
			
	(3) Functions
		1) Single Row Function : 한 개의 데이터에 적용할 수 있는 함수
		https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Functions.html#GUID-D079EFD3-C683-441F-977E-2C9503089982
			- String Function
				lower(), upper()
				substr()
				length()
				instr()
				ltrim(), rtrim(), trim()
				translate(), replace()
				ascii(), chr()
				--------------------------------------
				*. 이름이 ford인 직원의 이름, 부서번호, 급여를 조회. 단, 대소문자 구별 없이 검색 할 수 엤도록 한다.
				SELECT ename, deptno, sal FROM emp WHERE ename = upper('FoRd');
				
				*. 다음 주민번호에서 성별에 해당하는 것을 추출해라.
				dual : 연습용 테이블
				SELECT substr('9012311234567', 7, 1) FROM dual; // 7번째 자리 한개만 가져옴
				SELECT substr('9012311234567', 7) FROM dual;
				
				*. 문자열의 위치
				SELECT instr('MILLER', 'L') FROM dual;
				SELECT instr('MILLER', 'K') FROM dual;
				SELECT instr('MILLER', 'L', 1, 1) FROM dual; // 첫 번째 위치에서 한 개만 가져옴 (생략가능) : 3
				SELECT instr('MILLER', 'L', 1, 2) FROM dual; // 두 번째 위치의 L을 1개 가져옴 : 4
				SELECT instr('MILLER', 'L', 4, 1) FROM dual; // 네 번째 위치의 L을 1개 가져옴 : 4
				*. 문자열의 재배치
				SELECT translate('MILLER', 'L', '*') FROM dual;
				SELECT replace('MILLER', 'L', '*') FROM dual;
				SELECT translate(sal, '0123456789', '영일이삼사오육칠팔구') FROM emp; // 0 > 영 1 > 일 .. 이런식으로 바꿈
				SELECT replace(sal, '0123456789', '영일이삼사오육칠팔구') FROM emp; // 0123456789 자체를 영일이삼사오육칠팔구로 바꿈
				SELECT translate('JACK and JUE', 'J', 'BL') FROM dual; // 한글자 한글자만 바꿔줌 L은 안 바뀜
				SELECT replace('JACK and JUE', 'J', 'BL') FROM dual; // J를 BL로 바꿔줌
			- Numeric Function
				round(), trunc(), floor(), ceil()
				mod()
				power()
				sign()
				--------------------------------------------
				*. 소수점 자리수
				SELECT round(4567.678), round(4567.678, 0) FROM dual; // 반올림
				SELECT round(4567.678, 2), round(4567.678, -2) FROM dual;
				
				SELECT trunc(4567.678), trunc(4567.678, 2) FROM dual; // 버림
				SELECT floor(4567.678) FROM dual; // 내림
				SELECT ceil(4567.478) FROM dual; // 올림
			- Datetime Function
				sysdate
				months_between()
				add_months()
				next_day()
				last_day
				round(), trunc()
				------------------------------------------------------
				SELECT sysdate FROM dual;
				SELECT sysdate+100 FROM dual;
				
				SELECT months_between(sysdate, '2023/12/25') FROM dual;
				
				SELECT add_months(sysdate, 4) FROM dual;
				
				SELECT next_day('2023/7/7', '수') FROM dual; // 돌아오는 '금'에 해당하는 날짜가 언젠지
				
				SELECT last_day(sysdate) FROM dual; // 해당하는 월에 마지막 날짜
				
				SELECT round(sysdate) FROM dual;
				SELECT round(to_date('2023/8/16'),'MONTH') FROM dual; // 월 단위로 반올림
				SELECT round(to_date('2023/8/16'),'YEAR') FROM dual;
				
			- Conversion Function
				cast()
				to_date()
				to_char()
				to_number()
				------------------------------------------------------
				SELECT ename, sal, to_char(sal) FROM emp;
				SELECT ename, sal, to_char(sal, '$999,999') FROM emp; // 숫자를 3자리 마다 ,를 붙여 출력
				SELECT ename, sal, to_char(sal, 'L999,999') FROM emp; // 원화로 표시
				SELECT to_char(sysdate, 'YYYY MM DD HH"시" MI"분" SS"초"') FROM dual;
				
			- Etc...
				nvl(필드명, 대체할 값) // null value
				decode(필드명, 값, true, false)
				decode(필드명, 값, true, 값, true, 값, true, false)
				------------------------------------------------------
				*. 직원의 이름, 급여, 보너스, 총 급여를 조회
				SELECT ename, sal, comm, (sal + comm) AS 총급여 FROM emp; // comm이 NULL인 사람들은 총급여 출력이 안 됨
				SELECT ename, sal, comm, (sal + nvl(comm, 0)) AS 총급여 FROM emp;
				
				*. 현재 업무가 salesman이면 "영업"이라고 출력하고 그렇지 않으면 비영업 "일반"이라고 출력하시오.
				SELECT ename, decode(job, 'SALESMAN', '영업', '일반') FROM emp;
				
		2) Aggregation Function : 여러개의 데이터에 적용할 수 있는 함수. 집계함수
			sum(), avg(), max(), min(), count()
			------------------------------------------------------
			*. 직원이 총 몇 명인가?
			SELECT count(empno) FROM emp;
			SELECT count(*) FROM emp;
			
		3) Analytic Function : 고급함수, 데이터 분석

4. Sqldeveloper 설치
	(1) JDK 설치
	(2) Sqldeveloper 설치
	(3) HR 샘플
		- system으로 접속
		- ALTER USER hr ACCOUNT UNLOCK;
		- ALTER USER hr IDENTIFIED BY 1111;
		혹은
		- ALTER USER hr ACCOUNT UNLOCK IDENTIFIED BY 1111;
		
5. DML
	(1) INSERT
			INSERT INTO 테이블명(필드명, ...) VALUES(값, ...);
			INSERT INTO 테이블명 VALUES(값, ...);
		
	(2) UPDATE
			UPDATE 테이블명
			SET 필드명=값 [, 필드명=값, ...]
			WHERE 조건문
			
	(3) DELETE
		DELETE FROM 테이블명 WHERE 조건문;
	------------------------------------------------------
	*. 실습
		1) test1으로 접속해서 테이블 생성
			- 권한 부여(connection, resource)
			GRANT connect, resource TO test1;
			
			CREATE TABLE tbltest(
			id number, 
			name varchar2(10), 
			hiredate date
			);
			
		2) INSERT
			INSERT INTO tbltest(id, name, hiredate) VALUES(1, '홍길동', sysdate);
			INSERT INTO tbltest(id, name) VALUES(2, '임꺽정');
			INSERT INTO tbltest(id, name, hiredate) VALUES(3, '강감찬', null);
			INSERT INTO tbltest VALUES(4, '권율', '22/8/1');
			
		3) UPDATE 
			UPDATE tbltest
			SET name='신돌석'
			WHERE id=3;
			
			UPDATE tbltest
			SET hiredate=sysdate, name='유비'
			WHERE name='임꺽정';
		
		4) DELETE
			DELETE FROM tbltest WHERE id=3;

6. Sub Query
	(1) 다른 Query문 안에 포함된 Query문
	(2) 반드시 ()를 사용
	(3) ORDER BY를 사용할 수 없다.
		ORDER BY는 다 끝났을 때 마지막으로 실행됨
		서브쿼리에 ORDER BY를  쓰면 메인쿼리가 실행되기전에 ORDER BY가 실행되므로 오류가 남
	(4) 유형
		1) 단일행(Single Row)
		2) 다중행
		3) 다중열
	(5) 연산자
		1) 단일행 연산자
			- 기본 연산자(산술, 비교, 논리)
		2) 다중행 연산자
			- in, any, all, exists, not, ...
	(6) 상관 Sub Query
		부모 명령과 자식인 서브쿼리가 특정 관계를 맺는 것
		서브쿼리 단독으로 실행 불가
		메인 쿼리 -> 서브 쿼리 -> 메인 쿼리
	
	---------------------------------------------------------
	*. Ford의 급여보다 더 많이 받는 직원의 이름, 업무, 급여를 조회
	SELECT ename, job, sal 
	FROM emp 
	WHERE sal > (SELECT sal FROM emp WHERE ename='FORD');
	-- 메인 쿼리 결과는 1개 서브 쿼리도 1개 (1:1) -- 단일행 연산
	
	*. 사번이 7521의 업무와 같고, 급여가 7934보다 많은 직원의 사번, 이름, 업무, 급여를 조회
	SELECT empno, ename, job, sal
	FROM emp
	WHERE job = (SELECT job FROM emp WHERE empno=7521) AND
		sal > (SELECT sal FROM emp WHERE empno=7934);
		
	*. 업무별 최소급여를 받는 직원의 이름, 급여, 부서번호, 업무를 조회
	SELECT MIN(sal) AS 최소급여 FROM emp GROUP BY job;
	SELECT ename, sal, deptno, job FROM emp WHERE sal=800 or sal=1250 or sal=5000 or sal =2450 or sal =3000;
	
	SELECT ename, sal, deptno, job FROM emp WHERE sal IN (800, 1250, 5000, 2450, 3000);
	
	SELECT ename, sal, deptno, job FROM emp WHERE sal IN (SELECT MIN(sal) FROM emp GROUP BY job);
	-- 1:5 이지만 IN 연산자(같을 때)를 통해 가능하다.
	
	*. 업무별 최소급여보다 많이 받는 직원의 이름, 급여, 부서번호, 업무를 조회
	SELECT sal FROM emp WHERE sal > sal>800 or sal>1250 or sal>5000 or sal >2450 or sal >3000
	SELECT ename, sal, deptno, job FROM emp WHERE sal > ANY (SELECT MIN(sal) FROM emp GROUP BY job);
	-- 메인쿼리 결과 1개 서브쿼리 결과 5개
	-- or의 뜻을 나타내는 ANY 연산자 사용
	
	*. 업무별 최대급여 이상 받는 직원의 이름, 급여, 부서번호, 업무를 조회
	SELECT job, MAX(sal) FROM emp GROUP BY job;
	SELECT sal FROM emp WHERE sal >= WHERE sal >= sal>1300 and sal>=1600 and sal>=5000 and sal >=2975 and sal >=3000
	
	SELECT ename, sal, deptno, job FROM emp WHERE sal >= ALL (SELECT MAX(sal) FROM emp GROUP BY job);
	
	* MILLER의 데이터 수정(다중열 설명)
	SELECT sal, comm FROM emp WHERE ename = 'MILLER';
	
	UPDATE emp SET sal=1500, comm=300 WHERE ename = 'MILLER';
	
	*. 급여와 보너스가 (30번 부서에 있는 직원의 급여와 보너스)가 같은 직원에 대해
		사번, 이름, 부서번호, 급여, 보너스를 조회
	SELECT empno, ename, deptno, sal, comm 
	FROM emp 
	WHERE sal IN (SELECT sal FROM emp WHERE deptno=30) AND comm IN (SELECT comm FROM emp WHERE deptno=30);
	-- sal 이 같은 사람과 comm 이 같은 사람 따로따로 찾음
	
	SELECT empno, ename, deptno, sal, comm FROM emp WHERE (sal,comm) IN (SELECT sal, comm FROM emp WHERE deptno=30);
	
	 * MILLER의 데이터 수정(복귀)
	UPDATE emp SET sal = 1300, comm = null WHERE ename='MILLER';
	
	*. 적어도 한 명의 직원으로부터 보고를 받을 수 있는 직원의 이름, 업무, 입사일자, 급여를 조회
	-- 일반 서브 쿼리
	SELECT DISTINCT mgr FROM emp;
	SELECT ename, job, hiredate, sal FROM emp WHERE empno IN (SELECT mgr FROM emp);
	
	-- 상관 서브 쿼리
	SELECT empno, ename, job, hiredate, sal 
	FROM emp e
	WHERE exists(SELECT * FROM emp WHERE e.empno=mgr);
	-- 메인 쿼리의 emp를 가져와 mgr과 비교
	
	*. 가장 최근에 입사한 직원의 이름, 부서, 업무, 입사일자 조회
	SELECT ename, deptno, job, hiredate FROM emp ORDER BY hiredate DESC;
	
	SELECT ROWNUM, ename, deptno, job, hiredate FROM emp WHERE ROWNUM <= 5;

	SELECT ROWNUM, ename, deptno, job, hiredate FROM emp WHERE ROWNUM = 1 ORDER BY hiredate DESC;
	-- 출력 후 정렬
	
	*. INLINE VIEW
	SELECT ROWNUM, ename, deptno, job, hiredate FROM (SELECT * FROM emp ORDER BY hiredate DESC) WHERE ROWNUM = 1;
	-- 정렬 후 데이터 출력
	
7. JOIN
	(1) 여러 개의 테이블을 병합하여 하나의 결과를 도출하기 위한 방법
	(2) 종류
		1) Cartesian Product Join(Cross Join)
		2) Equi Join
			- 공통 필드의 레코드를 가져오는 방법(중복)
			- INNER JOIN(NATURAL JOIN) : 중복 제거
		3) OUTER JOIN
			- INNER JOIN 확장 : INNER JOIN + 공통되지 않은 레코드도 가져온다.
			- 종류
				LEFT OUTER JOIN
				RIGHT OUTER JOIN
				FULL OUTER JOIN
		4) Non Equi Join
			- 공통되지 않은 레코드를 가져오는 방법
		5) SELF JOIN
			- 서로 같은 테이블 조인
	------------------------------------------------------
	*. 실습
		- test1으로 접속
		- 테이블 생성
			CREATE TABLE tblA(id number, value number);
			CREATE TABLE tblB(id number, value number);
			CREATE TABLE tblC(id number, value number);
			
			INSERT INTO tblA VALUES(1, 10);
			INSERT INTO tblA VALUES(2, 20);
			INSERT INTO tblA VALUES(3, 30);
			INSERT INTO tblA VALUES(5, 50);
			INSERT INTO tblA VALUES(7, 70);
			
			INSERT INTO tblB VALUES(1, 10);
			INSERT INTO tblB VALUES(2, 20);
			INSERT INTO tblB VALUES(4, 40);
			INSERT INTO tblB VALUES(5, 50);
			INSERT INTO tblB VALUES(8, 80);
			
			INSERT INTO tblC VALUES(1, 10);
			INSERT INTO tblC VALUES(2, 20);
			INSERT INTO tblC VALUES(7, 70);
			INSERT INTO tblC VALUES(8, 80);
			INSERT INTO tblC VALUES(9, 90);
		
		- INNER JOIN
			SELECT tblA.id, tblA.value FROM tblA INNER JOIN tblB ON tblA.id = tblB.id;
			
			SELECT tblA.id, tblA.value FROM tblA a INNER JOIN tblB b ON a.id = b.id;
			
			SELECT a.id, b.value FROM tblA a JOIN tblB b ON a.id = b.id;
			
			- scott으로 접속
			직원의 사번, 이름, 업무, 부서번호, 부서명 조회
			SELECT empno, ename, job, dept.deptno, dname FROM emp INNER JOIN dept ON emp.deptno = dept.deptno;
			
			SALESMAN에 대해서 사번, 이름, 업무, 부서명 조회
			SELECT empno, ename, job, dname FROM emp JOIN dept ON emp.deptno = dept.deptno AND job = 'SALESMAN';
			-- 동시에 같이 처리
			
			SELECT empno, ename, job, dname FROM emp JOIN dept ON emp.deptno = dept.deptno WHERE job = 'SALESMAN';
			-- 조인을 하고 처리
			
			- test1으로 접속
			SELECT tblA.id, tblA.value FROM tblA, tblB;
			
			- OUTER JOIN
				- test1으로 접속
				SELECT a.id, a.value FROM tblA a LEFT OUTER JOIN tblB b ON a.id = b.id;
				
				SELECT a.id, a.value FROM tblA a RIGHT OUTER JOIN tblB b ON a.id = b.id;
				
				SELECT a.id, a.value FROM tblA a FULL OUTER JOIN tblB b ON a.id = b.id;
				
				SELECT a.id, a.value FROM tblA a, tblB b WHERE a.id = b.id(+);
				
				SELECT a.id, a.value FROM tblA a, tblB b WHERE a.id(+) = b.id;
				
				- scott으로 접속
				이름, 급여, 부서명, 근무지를 조회
				단, 부서명과 근무지는 모두 출력
				SELECT ename, sal, dname, loc FROM emp RIGHT OUTER JOIN dept ON emp.deptno = dept.deptno;
			
			- Non Equi Join
				- Scott 으로 접속
				직원들의 급여에 대한 등급을 조회
				SELECT ename, job, sal, grade FROM emp INNER JOIN salgrade ON sal >= losal and sal <= hisal;
			
			- SELF JOIN
			직원의 사번, 이름, 업무, 관리자, 관리자명을 조회
			SELECT a.empno, a.ename, a.job, a.mgr, b.ename FROM emp a JOIN emp b ON a.mgr = b.empno;
			
		- 3개 테이블 조인
			-- 표준
			SELECT tblA.id, tblA.value FROM tblA JOIN tblB ON tblA.id = tblB.id INNER JOIN tblC ON tblB.id = tblC.id;
			
			-- 비표준
			SELECT tblA.id, tblA.value FROM tblA, tblB, tblC WHERE tblA.id = tblB.id AND tblB.id = tblC.id;
			
8. Transaction
	(1) 개념 및 특징
		1) Transaction이란 데이터베이스 내에서 하나의 그룹으로 처리되어야 하는 명령문들을 모아 놓은 작업 단위
		2) 데이터의 일관성과 무결성을 보장하기 위해 반드시 트랜잭션 관리가 필요
		3) All or Nothing
		4) 동기화(Synchronize) :  두 개 이상의 데이터베이스 간 데이터를 동일하게 유지하는 것
	(2) 명령어
		1) rollback
		2) commit
		3) savepoint, begin transaction, end transaction, ...
		
9. Data Integrity
	잘못된 데이터로부터 지켜내자!
	(1) What? How?
		1) 실체(Entity) 무결성
		※ DB에서 Entity는 거의 테이블을 이야기함
			- 중복된 데이터 방지
			- Primary Key, Unique
		2) 영역(Domain) 무결성
			- 범위
			- Check
		3) 참조 무결성
			- 참조
			- Foreign Key
	(2) 컬럼의 특성
		1) NN(Not Null)
			- Primary Key
			- not null
			- default
		2) ND(No Duplicate)
			- Primary Key
			- Unique
			- Sequence
		3) NC(No Change)
			- Foreign Key
	--------------------------------------------------------
	*. 테이블 작성
		CREATE TABLE tblExam(
			id number null,
			name varchar2(10) null
		);
	*. Primary Key
		- 하나의 테이블에 단 한 개만 사용 가능
		- 여러 개의 필드를 묶어서 설정 가능
		
		INSERT INTO tblExam(name) VALUES('홍길동');
		INSERT INTO tblExam VALUES(1, '홍길동');
		INSERT INTO tblExam VALUES(1, '홍길동');
		
		ALTER TABLE tblExam ADD CONSTRAINT pk_id PRIMARY KEY(id);
		
		DROP TABLE tblExam;
		
		CREATE TABLE tblExam(
			id number CONSTRAINT pk_id PRIMARY KEY,
			name varchar2(10),
			age char(1),
			addr varchar2(20)
		);
		
		CREATE TABLE tblExam(
			id number,
			name varchar2(10),
			age char(1),
			addr varchar2(20),
			CONSTRAINT pk_id PRIMARY KEY(id)
		);
		
		ALTER TABLE tblExam DROP CONSTRAINT pk_id;
		※ varchar2(10) : 가변 길이. 미리 안 만들고 데이터를 계산해서 최대 10자리까지 할당
		char(10) : 고정 길이.  미리 메모리 10자리를 만들어 놓고 할당
		
		CREATE TABLE tblExam(
			id number not null,
			name varchar2(10)
		);
		
		ALTER TABLE tblExam ADD age number not null;
		DESC tblExam;
		
		ALTER TABLE tblExam MODIFY name varchar(20) not null;
		DESC tblExam;
		
		ALTER TABLE tblExam DROP COLUMN age;
		
		*. UNIQUE
			- 중복 방지
			- 하나의 테이블에 여러 개 사용 가능
			
			DROP TABLE tblExam;
			CREATE TABLE tblExam(
				id number not null,
				name varchar2(10),
				tel varchar2(15),
				CONSTRAINT uk_id UNIQUE(id),
				CONSTRAINT uk_tel UNIQUE(tel)			
			);
			
			INSERT INTO tblExam VALUES(1, '홍길동', null);
			INSERT INTO tblExam VALUES(1, '홍길동', null);
			INSERT INTO tblExam VALUES(2, '홍길동', null);
			
			DROP TABLE IF EXIST tblExam;
			
			*. DEFAULT
			
			DROP TABLE tblExam;
			
			CREATE TABLE tblExam(
				id number not null,
				name varchar2(10) default '무명씨',
				point number default 0			
			);
			
			INSERT INTO tblExam(id) VALUES(1);
			
			*. SEQUENCE
				-- CREATE SEQUENCE seq_num;
				CREATE SEQUENCE seq_num START WITH 2;
				INSERT INTO tblExam VALUES(seq_num.nextVal, '홍길동', 10);
				INSERT INTO tblExam VALUES(seq_num.nextVal, '임꺽정', 10);
				INSERT INTO tblExam VALUES(seq_num.nextVal, 'Tom', 10);
				
				DROP SEQUENCE seq_num;
			
		*. CHECK
			DROP TABLE tblExam;
			
			CREATE TABLE tblExam(
				id number,
				name varchar2(10),
				city varchar2(10),
				age number
			);
			
			ALTER TABLE tblExam
				-- ADD CONSTRAINT ck_city CHECK(city='서울' OR city='경기');
				ADD CONSTRAINT ck_city CHECK(city IN ('서울', '경기'));
				
			
			INSERT INTO tblExam VALUES(seq_num.nextVal, '홍길동', '서울', 20);
			INSERT INTO tblExam VALUES(seq_num.nextVal, '임꺽정', '제주', 20);
			
			-- 나이를 20 ~ 60세까지만 입력받을 수 있게 제약 추가
			ALTER TABLE tblExam
				ADD CONSTRAINT ck_age CHECK(age BETWEEN 20 AND 60);
				
			INSERT INTO tblExam VALUES(seq_num.nextVal, 'Tom', '경기', 71);
			
		*. DD(Data Dictionary)
			SELECT constraint_name, table_name FROM USER_CONSTRAINTS;
			
		*. FOREIGN KEY
			CREATE TABLE dept(
				deptno char(3),
				dname varchar2(20)
			);
			
			INSERT INTO dept VALUES ('100', '영업부');
			INSERT INTO dept VALUES ('110', '마케팅부');
			
			CREATE TABLE emp(
				empno number,
				ename varchar2(10),
				hiredate date,
				deptno char(3)
			);
			
			ALTER TABLE dept ADD CONSTRAINT pk_deptno PRIMARY KEY(deptno);
			
			ALTER TABLE emp ADD CONSTRAINT fk_deptno FOREIGN KEY(deptno)
				REFERENCES dept(deptno);
				
			INSERT INTO emp VALUES(1, 'tom', sysdate, '100');
			INSERT INTO emp VALUES(2, 'jerry', sysdate, '150');
			
			UPDATE dept
			SET deptno='200'
			WHERE deptno='100';
			
			-- 아직 참조하지 않은 데이터는 변경 가능
			UPDATE dept
			SET deptno='120'
			WHERE deptno='110';
			
			DROP TABE dept;
			
			*. TableExam
			CREATE TABLE POST(
				POST1 CHAR(3),
				POST2 CHAR(3),
				ADDR VARCHAR2(60) NOT NULL,
				CONSTRAINT pk_post PRIMARY KEY(POST1, POST2)
			)
			
			INSERT INTO POST VALUES ('100', '010', '경기도 성남시 분당구 정자동');
			
			CREATE TABLE MEMBER(
				ID NUMBER(4),
				NAME VARCHAR2(10) NOT NULL,
				SEX CHAR(1),
				JUMIN1 CHAR(6),
				JUMIN2 CHAR(7),
				TEL VARCHAR2(15),
				POST1 CHAR(3),
				POST2 CHAR(3),
				ADDR VARCHAR2(60),
				CONSTRAINT pk_id PRIMARY KEY(ID),
				CONSTRAINT uk_jumin UNIQUE(JUMIN1,JUMIN2),
				CONSTRAINT ck_sex CHECK(SEX IN (1, 2)),
				CONSTRAINT fk_post FOREIGN KEY(POST1, POST2) 
				REFERENCES POST(POST1, POST2)
			);
			
			INSERT INTO MEMBER VALUES(1234, '홍길동', '1', '990101', '1232344', '712-1234', '100','010', NULL);
10. VIEW
	(1) 물리적인 테이블을 근거로 하는 논리적인 가상 테이블
		- 실제 테이블을 가지고 여러 관점에서 다양하게 사용할 수 있게 하는 개념
	(2) 목적
		1) 사용자의 편의
		2) 보안성
	(3) 문법
		CREATE [OR REPLACE] VIEW 뷰이름 [{컬럼, ...}]
		AS
		SELECT문
	(4) 주의할 점 : DML
		1) View를 통해 입력되지 않은 컬럼에 대한 설정
		2) View를 통해 계산된 컬럼이나 파생된 컬럼의 수정
		3) View를 통해 여러 테이블을 수정
		4) 범위를 벗어난 수정
		(원본에는 없는 컬럼을 수정하면 오류 발생)
	----------------------------------------------------------
	*. Scott으로 접속
		CREATE VIEW vw_emp1
		AS
		SELECT empno, ename, deptno FROM emp WHERE deptno = 30;
		
		-- 뷰 생성을 위한 권한 부여
		GRANT CREATE VIEW TO scott;
		
		SELECT * FROM vw_emp1;
		
		- DD
		DESC user_views;
		SELECT view_name, text FROM user_views;
		
		-- 복합뷰
		CREATE VIEW vw_emp2
		AS
		SELECT empno, ename, sal, emp.deptno, dname, loc
		FROM emp JOIN dept ON emp.deptno = dept.deptno
		ORDER BY empno DESC;
		----------------------------------------------------------
		-- 범위를 벗어난 수정
		CREATE OR REPLACE VIEW vw_emp3
		AS
		SELECT empno, ename, job, sal FROM emp
		WHERE sal BETWEEN 1500 AND 3000;
		
		
		/*
		7499 ALLEN                SALESMAN                 1600
		7566 JONES                MANAGER                  2975
		7698 BLAKE                MANAGER                  2850
		7782 CLARK                MANAGER                  2450
		7844 TURNER               SALESMAN                 1500
		7902 FORD                 ANALYST                  3000
		*/
		
		CREATE OR REPLACE VIEW vw_emp3
		AS
		SELECT empno, ename, job, sal FROM emp
		WHERE sal >= 1500 AND sal <= 3000 WITH CHECK OPTION;
		
		-- WITH CHECK OPTION: 혹시나 범위 밖으로 수정 되면 안되게 막아줌
		
		UPDATE vw_emp3
		SET sal = 1000
		WHERE empno = 7499;
		
		-- WITH READ ONLY
		CREATE OR REPLACE VIEW vw_emp3
		AS
		SELECT empno, ename, job, sal FROM emp
		WHERE sal >= 1500 AND sal <= 3000 WITH READ ONLY;
		
		----------------------------------------------------------
		-- 입사일이 빠른 사람 5명을 조회
		CREATE VIEW vw_emp4
		AS
		SELECT empno, ename, job, hiredate FROM (
		SELECT * FROM emp emp2 ORDER BY emp2.hiredate ASC)
		WHERE ROWNUM <= 5;
11. INDEX
	(1) SQL명령문의 처리속도를 향상시키기 위해서 컬럼에 생성하는 객체
	(2) 장점
		1) 검색속도가 빨라진다
		2) 시스템에 걸리는 부하를 줄여서 시스템 전체 성능을 향상 시킨다
	(3) 단점
		1) 인덱스를 생성하는데 시간이 걸린다
		2) 인덱스를 위한 추가적인 공간이 필요하다
		3) 데이터의 DML이 자주 일어날 경우에는 오히려 성능이 저하된다
	(4) 생성 방법
		1) CREATE INDEX 
		2) 제약조건에 의해 자동 생성
	(5) 확인 방법
		1) DD
			- USER_INDEXED, USER_IND_COLUMNS
			- SELECT index_name, table_name, column_name
			FROM user_ind_columns WHERE table_name in ('EMP', 'DEPT');
		2) Execute Plan
			- Sqldeveloper > 계획 설명
	(6) 인덱스 사용여부 판단
		1) 인덱스를 사용해야 하는 경우
			- 테이블에 행의 수가 많을 때
			- WHERE 문에 해당 컬럼이 많이 사용 될 때
			- 검색 결과가 전체 데이터의 2% ~ 4% 정도일  때
			- JOIN에 자주 사용되는 컬럼이나 NULL을 포함하는 컬럼이 많은 경우
		2) 인덱스를 사용하지 말아야 하는 경우
			- 테이블의 행의 수가 적을 때
			- WHERE 문에 해당 컬럼이 자주 사용되지 않을 때
			- 검색 결과가 전체 데이터의 10% ~ 15% 이상 일 때
			- 테이블에 DML 작업이 많은 경우
		----------------------------------------------------------
		-- emp 테이블 복사
			CREATE TABLE emp_copy AS SELECT * FROM emp;
			SELECT constraint_name, table_name FROM USER_CONSTRAINTS;
			-- 제약 조건은 복사 되지 않음
			
		-- 데이터 불리기
			INSERT INTO emp_copy SELECT * FROM emp_copy;
			
		-- 검색할 데이터 입력
			INSERT INTO emp_copy(empno, ename) VALUES (1234, 'hong');
			
		-- 시간 체크
			SET TIMING ON
			
		-- 인덱스가 없는 상태에서 검색
			SELECT empno, ename FROM emp_copy WHERE ename = 'hong'; -- 00:00:00.09
			
		-- 인덱스 생성 후 검색
			CREATE INDEX idx_empcopy_ename ON emp_copy(ename); -- 00:00:00.61
			SELECT empno, ename FROM emp_copy WHERE ename = 'hong'; -- 00:00:00.04
			
12. Stored Procedure
	(1) 정의 : 자주 사용하는 쿼리문을 미리 컴파일하여 필요할 때 호출
	(2) 문법
		CREATE [OR REPLACE] PROCEDURE 프로시저명 [(파라미터, ...)]
		IS
		BEGIN
			코드
		END;
	(3) 절차적인 구조
		[DECLARE
			선언부]
		BEGIN
			코드 작성
		[EXCEPTION
			예외처리]
		END;
	----------------------------------------------------------
	*. 사번이 7902인 사원의 급여를 3500으로 수정하는 프로시저 작성
		CREATE OR REPLACE PROCEDURE usp_sal
		IS
		BEGIN
			UPDATE emp
			SET sal = 3500
			WHERE empno = 7902;
		END;
		/
		※ edit : 바로 직전 시행한 코드에 대해 편집 가능
		
		exec usp_sal;
		
	*. 위의 예제를 매개변수를 사용하여 개선
		CREATE OR REPLACE PROCEDURE usp_sal(p_empno in number, p_sal in number)
		IS
		BEGIN
			UPDATE emp
			SET sal = p_sal
			WHERE empno = p_empno;
		END;
		/
		
		exec usp_sal(7902, 3000);
		
	*. 위의 예제를 매개변수를 사용하여 개선
		CREATE OR REPLACE PROCEDURE usp_sal(p_empno in number, p_sal in number)
		IS
		BEGIN
			UPDATE emp
			SET sal = p_sal
			WHERE empno = p_empno;
			
			IF sql%notfound THEN
				dbms_output.put_line('없는 사원번호입니다.');
			ELSE
				dbms_output.put_line(sql%rowcount || '명의 자료가 수정됨');
			END IF;
		END;
		/
		
		-- sql%notfound : 결과를 찾지 못했다 -> 아무것도 업데이트를 안했다
		
		-- 메세지 출력
		SET SERVEROUTPUT ON;
		
		exec usp_sal(999, 3000);
		----------------------------------------------------------
		*. 특정한 수에 7%의 세금을 계산하여 그 결과를 돌려받을 수 있는 프로시저 작성
		CREATE OR REPLACE PROCEDURE usp_tax(p_num in number, p_result OUT number)
		IS
		BEGIN
			p_result := p_num * 0.07;
		END;
		/
		
		DECLARE
			v_result NUMBER;
		BEGIN
			usp_tax(10000, v_result);
			DBMS_OUTPUT.PUT_LINE('결과:' || v_result);
		END;
		----------------------------------------------------------
		*. 이름을 입력받아 그 직원의 부서명과 급여를 검색하는 프로시저
		CREATE OR REPLACE PROCEDURE usp_search
		(
		p_ename IN emp.ename%type,
		p_dname OUT dept.dname%type,
		p_sal OUT emp.sal%type
		)
		IS
			v_deptno emp.deptno%type;
		BEGIN
			SELECT sal, deptno INTO p_sal, v_deptno FROM EMP WHERE ename = upper(p_ename);
			SELECT dname INTO p_dname FROM dept WHERE deptno = v_deptno;
		END;
		
		-- IS : 변수 선언 부분
		-- INTO : 검색된 결과값을 변수에 대입
		
		-- 테스트
		var g_dname varchar2(14)
		var g_sal number
		
		exec usp_search('Ford', :g_dname, :g_sal);
		print :g_dname;
		print :g_sal;
		----------------------------------------------------------
		*.
		
13. Trigger


14. DB 설계(모델링)