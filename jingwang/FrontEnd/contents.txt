7.19
// 원시소스 (사람이 작성한 소스) (텍스트) 을 컴파일(번역) 하여 컴퓨터 언어 (이진수)
// 크로스 브라우징 : 웹 페이지 제작 시에 모든 브라우저에서 깨지지 않고 의도한 대로 올바르게 나오게 하는 작업
// Entity : 키보드로 쓸 수 없는 특수분자들을 별도로 따로 만들고 불러오는 방법. 참조하는 기술

Visual Studio Code
- 브라우저에 출력
	1) live server 설치
	
HTML(Hyper Text Markup Language)
	https://w3schools.com
	Language : 언어
	Markup : <시작태그> 데이터 </끝태그> 형식
	Hyper Text : 문서간에 연결할 수 있는 기술
	
	뜻 : Web에서 공통으로 쓸 수 있는 정보를 공유하기 위한 언어
	용도 : 문서의 구조를 설정
	역사 : https://namu.wiki/w/HTML
	버전  
		- HTML 4.x
		- XHTML
		- HTML 5.x
	웹 제작시 고려할 사항
		- 웹 표준
		- 웹 접근성
		- 크로스 브라우징
	문법
		- 주석 처리 : <!-- 컨텐츠 -->
		- 태그의 기본 구조
			<열린태그 속성="속성값">컨텐츠</닫힌태그> <<- Element(시작과 끝을 잘 묶어준, 완전히 하나의 구성요소) 라고 함
			<열린태그></닫힌태그> 또는 <열린태그 /> // 컨텐츠가 없을 때
		- 문서의 기본 구조
			<!DOCTYPE html>
			<html>
				<head>
					다양한 메타정보나 선언부
				</head>
				
				<body>
					화면에 보여질 본문 내용
				</body>
			</html>
		- 태그의 종류
			1) <head></head>
				- <title></title>
				- <meta></meta>
					ㄴ <meta name="viewport" content="width=device-width, initial-scale=1.0">
					ㄴ 안해도 상관 없지만 해두면 좋음. 모바일이나 컴퓨터 화면에 알아서 뷰포트를 조절해주는 문장
			2) 글자 꾸미기
				- test2.html
			3) 이미지
				- jpg(jpeg) : 압축률이 뛰어나다.(용량이 작다) 단 여러 번 반복 저장하게 되면 손실율이 매우 높아진다.
				- png : gif 대체 포맷. 비손실 압축. 투명도 지원
				- gif : 비손실 압축. 8비트 색상만 지원. 여러 장의 이미지를 하나의 파일로 묶을 수 있다.
				- webp : jpg, png, gif를 모두 대체할 수 있는 구글에서 개발한 이미지 포맷
				- test3.html
				
				※ 경로 (path)
				- 상대 경로
				- 절대 경로
					ㄴ 로컬 경로 (서버에서는 사용 불가, 내 pc에서는 사용 가능)
					ㄴ 가상 경로
			4) 하이퍼 링크
				※ URL(Uniform Resource Locator)
					네트워크 상에서 자원이 어디 있는지를 알려주기 위한 규약이다. 즉, 컴퓨터 네트워크와 검색 메커니즘에서의 위치를 지정하는, 웹 리소스에 대한 참조이다. 쉽게 말해서, 웹 페이지를 찾기위한 주소를 말한다.
				- 형식
					프로토콜명://도메인주소:포트번호/폴더명/파일명#세부위치
					// http는 프로토콜 (hyper text tranasfer protocol)
					http://
				- test4.html
			5) 테이블
				- test5.html
			6) Input Type : 폼 태그
				- test6.html
================================================================================================================================================
CSS (Cascading Style Sheet)
	개요
		1) 버전
			css 1.x -> css 2.x -> css 3.x > css 4.x
		2) 목적
			- 디자인(HTML 등)의 효과적인 관리(유지보수 등)
			- 웹 표준화(Cross Browsing)
	사용 방법
		1) External Style
			- 별도의 .css파일을 만들어서 호출하여 사용하는 방식
		2) Inline Style
			- 태그 안에서 직접 사용하는 방식
			- style 이라는 속성을 이용
		3) Internal Style
			- 하나의 페이지에 단 한 번만 정의함으로써 같은 페이지내에서는 동일한 디자인을 재사용할 수 있다.
		4) Import Style
			- 외부의 css파일간의 연결(직렬)
	문법
		선택자(Selector) { 속성 : 값; }
		
		1) 선택자(Selector)
			a) 기본 선택자
				- * (전체 선택자)
				- 태그 선택자 : 태그 이름으로 선택
				- 클래스 선택자 : 태그의 class 속성의 값으로 선택 (. 표시)
				- 아이디 선택자 : 태그의 id 속성의 값으로 선택 (# 표시)
				selector1.html
			b) 복합 선택자
				- 일치 선택자(Basic Combinator) : 태그.클래스명
				- 자식 선택자(Child Combinator) : 태그 > 클래스명
				- 하위(후손) 선택자(Descendant Combinator) : 태그 클래스명
				- 인접 형제 선택자(Adjacent Sibling Combinator) : .클래스명 + 태그
				- 일반 형제 선택자(General Sibling Combinator) : .클래스명 ~ 태그
				selector2.html
			c) 가상 클래스 선택자(Pseudo Classes Selector) : ":" 을 사용
				- hover : 마우스 커서가 요소 위에 있는 동안 선택
				- active : 마우스를 클릭하고 있는 동안 선택
				selector3.html
				- focus : 포커싱이 되면 선택. 모든 걸 포커스가 되는 게 아님.
					input, a, button,label, select 등 주로 대화형 컨텐츠들
				selector4.html
				- first-child
				- last-child
				- nth-child
				- not
				selector5.html
			d) 가상 요소 선택자(Pseudo Elements Selector) : "::" 사용, 컨텐츠 추가
				- before
				- after
				selector6.html
			e) 속성 선택자(Attribute Selector)
				※ 속성이란? <태그명 속성> </태그명>
				[속성명] {...}
				[속성=값] {...}
				selector7.html
		2) 디자인 속성값
			- Font 관련 (font, line)
			- 색상 및 이미지 관련(color, background)
			- 텍스트 관련(text, line)
			- 여백(margin, padding, border)
		3) 스타일 상속
			- 현재 요소의 스타일이 자식이나 하위 요소에까지 영향을 미치는 것
			- 주로 글자/문자 관련 속성들이 상속(font, text 관련)
				inheritance1.html, inheritance2.html
		4) Block 요소와 Inline 요소
			a) Block 요소
				- 줄 바꿈 현상이 나타남
				- width/height 값 사용 가능(공간 만들기 가능)
				- margin(바깥 여백)과 padding(안 쪽 여백) 값 사용 가능(상하 배치 작업 가능)
				- inline 요소를 포함할 수 있다.
				- <div>, <p>, <h>, <ul>, ...
				block.html
			b) Inline 요소
				- 줄 바꿈 현상이 없음
				- width/height 값 적용 불가
				- margin/padding/bottom 값 적용 불가(좌우 여백은 가능)
				- block 요소를 포함할 수 없다
				- <img>, <a>, <span>, ...
				inline.html
			※ <input> : block 과 inline 두 가지 특징을 모두 가지고 있다.
		5) 디자인 속성
			a) width, height
			- width 는 자동으로 크기가 설정된다.
				<div></div>
				div {
					height:100px;
					background-color :orange;
				}
			b) margin, padding
				margin : top, right, bottom, left
				margin : [top, bottom] [left, right[
				ex)
					margin : 20px 20px
				margin : [top] [left, right] [bottom]
				margin : [top, right, bottom, left]
				
				padding 도 동일
			c) border
				border : 선-두께 선-종류 선-색상 - 한 번에
				border : width, border-style, border-color - 개별적
			d) 크기 계산 : box-sizing
				- content-box (기본값)
				- border-box
					<div class='item'>hello</div>
					<div class='item'>hello</div>
					
					.item {
					  width: 100px;
					  height: 100px;
					  background-color: orange;
					}

					.item:first-child{
					/* border 4px+4px, padding 20px+20px 총 48px를 빼야 두번째 div랑 크기가 같아짐   */
					/*   width: 52px;
					  height: 52px; */
					/* 자동으로 맞춰짐  */ 
					  box-sizing: border-box;
					  border: 4px solid red;
					  padding: 20px;
					}
				-------------------------------------------------------
			e) 넘침 제어 : overflow
				- visible : 넘친 내용을 그대로 보여줌
				- hidden : 넘친 내용을 숨김
				- auto : 넘친 내용이 있을 경우에만 잘라내고 스크롤바 생성
				- scroll (거의 안씀)
					<div class="parent">
						<div class="child"></div>
					</div>
					
					.parent{
					  width: 200px;
					  height: 150px;
					  background-color: royalblue;
					  margin: 20px;
					/*   overflow: hidden; */
					  overflow: auto;
					}

					.child{
					  width: 300px;
					  height: 100px;
					  background-color: orange;
					}
				-------------------------------------------------------------------
			f) 출력 : display
				- block, inline, inline-block
				- flex(1차원), grid(2차원), none(화면에서 사라짐)
				- table, table-cell, table-row, ...
			g) 배경 : background
				- background-image: url("경로")
				test.html
			h) 배치
				ㄱ) 기준점 : position
					- static (기본값)
					- relative : 요소 자신을 기준
					- absolute : 위치상 부모 요소를 기준, 가장 많이 사용
					- fixed : 뷰포트(브라우저) 기준, 화면 고정 효과가 있다.
					<div class="wrap">
					  <div class="container">
						<div class="item">1</div>
						<div class="item">2</div>
						<div class="item">3</div>
					  </div>
					</div>
					
					.wrap{
					  width: 400px;
					  height: 300px;
					  background-color: tomato;
					  position: relative;
					}

					.container{
					  width: 300px;
					  background-color: royalblue;
					/*   컨테이너 위치 relative로 잡아주기 */
					  position: static;
					}

					.container .item{
					 border: 4px dashed red;
					 background-color: orange;
					}

					.container .item:nth-child(1){
					  width: 100px;
					  height: 100px;
					}

					.container .item:nth-child(2){
					  width: 140px;
					  height: 70px;
					/*   현재 있던 곳에서 위를 기준으로 30px 왼쪽을 기준으로 60px 떨어져 있음. 근데 실제로 움직인 건 아니고 거의 잔상 느낌 그래서 relative는 잘 쓰이진 않음. 레이아웃이 깨질 수 있음 
					  position: relative; 
					  top: 30px;
					  left: 60px; */
					
					/*   구조상에 부모는 있어도 위치상에 부모가 없음 부모가 없으면 상위 부모를 찾는데 없으면 뷰포트(body)가 기준이 됨
					  하지만 지금 원하는 건 컨테이너가 기준이 되는 것 따라서 컨테이너에 위치를 잡아줌(position)*/
					  position : absolute;
					  bottom: 30px;
					  right: 60px;
					  
					}

					.container .item:nth-child(3){
					  width: 70px;
					  height: 120px;
					}
				-------------------------------------------------
				ㄴ) 방향 지정 :top, bottom, right, left
					- auto : 브라우저가 자동으로 계산
					- 숫자값 지정 : px, em, rem 단위 사용
				ㄷ) Stack Order(요소 쌓임 순서) : z-index
					- 요소에 position 속성의 값이 있는 경우 위에 쌓임 (static 제외)
					- 위의 조건이 같은 경우 z-index 속성의 숫자 값이 높을 수록 위에 쌓임
					- 위의 모든 조건이 같은 경우 HTML의 다음 구조일 수록 위에 쌓임		
				<div class="container">
				  <div class="item">1</div>
				  <div class="item">2</div>
				  <div class="item">3</div>
				</div>

				.container{
				  width: 300px;
				  background-color: royalblue;
				  position: relative;
				}

				.container .item{
				  width: 100px;
				  height: 100px;
				  border: 4px dashed red;
				  background-color: orange;
				}

				.container .item:nth-child(1){
				  position:relative;
				  z-index:1;
				}

				.container .item:nth-child(2){
				  position: absolute;
				  top: 50px;
				  left: 50px;
				  z-index:0;
				}

				.container .item:nth-child(3){
				  position: fixed;
				  z-index:2;
				}
				
				ㄹ) position 의 값으로 absolute, fixed가 지정된 요소는, display 속성이 block으로 변경됨
				<span>123</span>
				
				/* 인라인 요소, 글자 속성 이므로 폭과 높이 적용이 안됨 display: block을 넣으면 가능 */
				span {
				  width: 100px;
				  height: 100px;
				  background: orange;
				  font-size: 40px;
				  position:fixed;
				/*   display: block; */
				}
				-----------------------------------------------------------------------
				ㅁ) flex(정렬) : 1차원 레이아웃의 정렬
					- Flex Container
						- display : 가용한 공간 내에서 크기와 위치를 자동 조정
						- flex-direction : 컨테이너 안에 위치되는 방법 지정
						- flex-wrap : 줄바꿈
						- justify-content : 수직방향의 정렬
						- align-content : 기본 축 내에서 개별 항목을 정렬하는 방법과 유사하게 교차 축에 추가 공간이 있을 때 flex container의 선을 정렬
						- align-items : 세로 축을 기준으로 정렬
					- Flex Item
						- order : item의 순서를 설정
						- flow-grow : 속성이 남는 행 여백을 분배해서 채움
						- flex-shrink : 속성이 레이아웃을 벗어난 아이템 너비를 분배해서 줄이는 방법
						- flex-basis : flex 아이템의 기본 크기 설정
						
				<div class="container">
				  <div class="item">1</div>
				  <div class="item">2</div>
				  <div class="item">3</div>
				</div>
				
				.container {
				  background : royalblue;
				  display: flex;
				}

				.item{
				  width: 100px;
				  height: 100px;
				  border: 3px dashed red;
				  background : orange;
				}
			------------------------------------------------------------------
		6) 전환 : transition
			transition : 속성명 지속시간 타이밍함수 대기시간;
			<div></div>
			
			div {
			  width: 100px;
			  height: 100px;
			  background : orange;
			  transition :
				width 2s, 5s,
				background 2s;
			}

			div:hover {
			  width: 300px;
			  background : royalblue;
			}
		------------------------------------------------------------------------
		7) 변환 : transform
			transform : 변환함수1 변환함수2 변환함수3 ...;
				원근법, 이동, 크기, 회전, 기울임
			- 2D 변환함수
			- 3D 변환함수
			test2.html
================================================================================================================================================
JavaScript
	※ HTML이 웹 페이지의 기본 구조를 담당하고, CSS가 디자인을 담당한다면 JavaScript는 클라이언트 단에서 웹 페이지가 동작하는 것을 담당한다. 웹 페이지를 자동차에 비유하자면, HTML은 자동차의 뼈대, CSS는 자동차의 외관, JavaScript는 자동차의 동력원인 엔진이라고 볼 수 있다.
	
	※ ECMA스크립트란, ECMA-262 기술 규격에 따라 정의하고 있는 표준화된 스크립트 프로그래밍 언어를 말한다. 자바스크립트를 표준화하기 위해 만들어졌다
	
	- 스크립트 언어
	- 객체 기반 언어
	- 사용 방법
		1) inline 방식
			inline.html
		2) internal 방식
			internal html
		3) external 방식
			external.html
	※ 변수 표기법
		- dash-case(kebab-case)
			the-quick-brown-fox
		- snake_case(HTML, CSS)
			the_quick_brown_fox
		- camelCase(JS)
			theQuickBrownFox
		- PascalCase(JS)
			TheQuickBrownFox
	※ Zero Based Numbering
	- 문법
		1) 변수 : 임시 기억(저장) 장소
			- 변수 선언 방법
				var 변수명; (안 쓰는 거 권장)
				let
				const
				01_variable.html
		2) 자료형(DataType)
			- String
			- Number
			- Boolean
			- Undefined
			- Null
			- 값형 - 값을 저장 
			※ 객체: 복잡한 데이터를 쉽게 쓸 수 있게 묶어놓은 데이터
			- Object
			- Array
			- Function
			- 참조형 - 주소를 저장
			02_datatype.html
		3) 기본 연산자(Operator)
			- 산술 연산자
				* / + - % ++ --
			- 비교 연산자
				> < >= <= == === !=
			- 논리 연산자
				&&(and); 모두가 참일 때 ||(or) !(not); 토글 연산자(한 번씩 번갈아가면서 수행 ex.스위치)
				------------------------
				a b	 a&&b a||b  !a
				T T	  T     T    F
				T F   F     T    F
				F T   F     T    T
				F F   f     F    T
			※ false를 의미하는 자료형
				- false
				- 0
				- null, undefined, NaN
				- ''
			- 할당(대입, 치환) 연산자
				= += *= /= ...
			※ 연산자의 우선순위는 항상 ()를 사용하는 습관 들이기
			03_operator.html
		4) 확장된 연산자
			- Nullish 병합 연산자 : null 값만 건너뜀 (null을 false로 처리)
			- 삼항 연산자
			- 전개 연산자
				...을 이용하여 []을 제거하는 역할
			- 구조 분해 할당 연산자
			04_operator2.html
		5) 제어문
			- 조건문
				if (조건문) {실행할 코드};
				---------------------
				if (조건문) {실행할 코드}
					else {실행할 코드};
				---------------------
				if (조건문) {실행할 코드};
					else if {실행할 코드}
					else if {실행할 코드};
					...
				---------------------
				switch(변수 또는 상수 또는 수식) {
					case 값: 실행할 코드 break;
					case 값: 실행할 코드 break;
					case 값: 실행할 코드 break;
					default: 실행할 코드 break;
				}
				05_control.html
			- 반복문
				※ 주의 할 점
					1. 무한 반복
					2. 반복 횟수
				※ 지켜야 할 점
					1. 초기화
					2. 조건식
					3. 카운팅
				※ 변수의 유효 범위
					특별한 이유가 없다면 지역 변수 사용
					- 지역 변수 : 함수 내부에서 선언된 변수로, 함수가 실행되면 만들어지고 함수가 종료되면 소멸하는 변수. 함수 외부에서는 접근할 수 없음.
					- 전역 변수 : 함수 외부에서 선언된 변수로, 프로그램 전체에서 접근할 수 있는 변수
				while(조건문){
					실행할 코드
				}
				---------------------
				for(초기화; 조건식; 증감;) {
					실행할 코드
				}
				---------------------
				do{
					무조건 한 번 실행할 코드
				} while(조건문)
				---------------------
				for of : 배열 데이터
				for (변수명 of 배열){
					실행할 코드
				}
				---------------------
				for in : 객체 데이터
				for (변수명 in 배열){
					실행할 코드
				}
			- 반복 강제 중지
				break; : 완전 종료
				continue; : 일시 종료
		6) 함수(Function)
		※ 주의사항 - 단일기능, 재사용성
			- 모듈화(재사용, 유지보수)
			- 사용자 정의 함수 (User Define Function)
			- 기성 함수
			**************BASIC********************
			a) 함수 작성 문법
				function 함수명() {
					코드
				}
			b) 호출 방식
				- 인자가 없는 방식
				- 인자가 있는 방식
				- 반환값이 있는 방식
					return : 
						- 값을 반환(반드시 한 개만 리턴 가능)
						- 함수를 강제 종료
			06_function1.html
			07_function2.html
			*****************************************
			- 자료형으로서의 function
			- 함수 작성 문법
				a) Function Declaration
					function 함수명() {코드}
				b) Function Expression
					변수명 = function(){코드} //익명 함수. 한 번만 씀
				- 호이스팅(Hoisting)
					함수가 선언되어 있는 코드를 유효한 범위 내에서 제일 상위로 끌어 올려서 동작하게 하는 개념
					Function Declaration에서만 적용
				08_function3.html
			- 매개변수
				a) Default Value
				b) 객체의 구조 분해 할당
				c) 배열의 구조 분해 할당
				d) 나머지 매개변수
			- 함수 작성 문법
				Arrow Function(화살표 함수)
				------------------------
				function sum() {코드}
				const sum = function() {코드}
				const sum = ()=>{코드}
				------------------------
				※ 매개변수가 없을 때 (생략 불가능)
					const a = () => {}
				※ 매개변수가 하나 있을 때 (생략 가능)
					const a = x => {}
				※ 매개변수가 두 개 이상 있을 때 (생략 불가능)
					const a = (x, y) => {}
					
				※ return을 생략할 때에는 {}도 생략해야 한다.
					const a = x => {return x*x;}
					const a = x => x*x;
				※ 두 줄 이상일때는 {}와 return 생략 불가능
					const a = x => {
						console.log(x*x);
						return x*x;
					}
				※ 객체 형식 사용 가능
					const a = () => {return {x:1} }
					※ 한 줄 일 때
					const a = () =>  {x:1} // 이것은 오류
					const a = () =>  ({x:1}) // 이것은 가능
				※ 배열 형식 사용 가능
					const a = () => { return [1, 2, 3] }
					※ 생략 가능
					const a = () => [1, 2, 3] // 구분이 가능하기 때문에
					09_function4.html
			- 콜백 함수
				함수가 실행될 때 인자로 돌아가는 또 다른 함수가
				09_function4.html
			- 재귀(recursive) 함수
				function a(){
				...
				a()
				}
				
				a();
			- 내장(built-in) 함수
				메시지 관련 함수
					window.prompt()
					window.alert()
					window.confirm()
				변환 함수
					Number(), String()
					parselnt(), parseFloat()
					eval()
				그 외
					isFinite(), isNan()
					escape(), unescape() : 알파벳과 숫자 및 * @ - _ + . / 를 제외한 문자를 모두 16진수로 바꾸어주거나 다시 원상태로 복구
				10_function5.html
		7) 객체
			※	함수 : 어디에도 속하지 않고 함수 자체로만 존재하는 것
				메서드 : 객체라는 커다란 덩어리 안에 있는 함수
			- 객체 생성 방법
				객체명 = function(파라미터){
					this.인스턴스변수 = 파라미터
				}
				
				객체명.prototype.메서드명 = function(파라미터){
					this.인스턴스변수 = 파라미터
				}
				
				b1 = new Object()
				b1.title = "노인과 바다"
				b1.author = "헤밍웨이"
				b1.setValue = function(t, a){
					this.title=t
					this.author=a
				}
				11.userDefineObject1.html
			- 내장 객체
			(mdn으로 검색)
				a) Array
					- length // 배열의 길이
					- concat() // 문자열 합치기, join() // 배열의 원소를 문자열로 합치기, reverse() // 배열 반전, sort() //배열 정렬, slice() // 배열 자르기
				b) Date
					-getFullYear() // 연도 출력, getMonth() // 월 출력, getDate() // 날짜 출력, getDay() // 요일 출력 (월1... 일7), getHour() // 시간 출력, ...
				c) Math
					- pow() //제곱, ceil() // 올림, round() // 반올림, random() // 난수 생성, abs() // 절대값, ...
				d) String
					-toLowerCase() //소문자, toUpperCase() //대문자, charAt() // 특정 인덱스 문자 반환, concat() // 문자열 합치기, indexOf() //특정 문자 위치 찾기, split() // 문자열을 배열로 변환, substr() // 문자열 자르기, ...
				e) Screen
					- height, width, availHeight //화면의 사용 가능한 높이 값을 반환, availWidth // 화면의 사용 가능한 너비 값을 반환, pixelDepth //화면의 픽셀당 비트 수를 반환, colorDepth //화면의 표현 가능한 컬러 색상 수를 반환
				f) Window
					location // 현재 브라우저에 표시된 html 문서의 주소
					history // 브라우저의 히스토리 정보를 문서와 문서 상태 목록으로 저장하는 객체, 뒤로가기
					navigator // 브라우저와 관련된 정보를 컨트롤. 브라우저에 대한 버전, 정보, 종류 등 관련된 정보를 제공
					document //  웹 페이지 그 자체를 의미
						link
						anchor // a태그. 특정 위치로 이동
						image
						layer
						form
							text
							textarea
							password
							radio
							checkbox
							button
							select
							reset
							submit
				ex) window.document.form.text
				12_window.html, zipcode.html, 10_function5.html
				
		8) DOM (Document Object Model)
			자바스크립트가 HTML에 접근할 수 있도록 도와주는 모델(트리 구조)
			- HTML문서를 객체로 표현한 것
			- DOM API : DOM에서 사용할 수 있는 여러가지 명령어(함수)
			※ API (Application Programming Interface) : 함수들의 묶음, 두 소프트웨어 구성 요소가 서로 통신할 수 있게 하는 메커니즘
			
			a) Node(나머지) vs Element(태그)
				- Node : HTML 요소, 텍스트, 주석 등 모든 것을 의미
				- Element : HTML 요소만을 의미
				13_DOM1.html
			b) 검색과 탐색
				- document.getElementById() : id 속성으로 검색
				- document.querySelector() : css 선택자로 검색
				- document.querySelectorAll() : css 선택자로 검색한 모든 요소
				----------------------------------------
				- N.parentElement : 노드의 부모요소를 반환
				- E.cloeset() : 자신을 포함한 조상 요소 중 'css선택자'와 일치하는 가장 가까운 요소를 반환
				- N.previousSibling / N.nextSibling : 노드의 이전 형제 혹은 다음 형제노드 반환
				- E.previousElementSibling / E.nextElementSibling
				- E.children : 요소의 모든 자식 요소를 반환
				- E.firstElementChild / E.lastElementChild : 첫 번째 자식 요소, 마지막 자식 요소를 반환
				
body
div
	<p class="inner-text first-item" id="first">
		Happy Week
		<a href="https://chat.netsong7.net" id="chat-link">
		
	<p class="inner-text second-item">
		Happy Programming
		<a href="https://www.w3schools.com" id="w3-link">
			W3schools
		
<p class="outer-text first-item" id="second">
	<b>
		Programming is funny
<p class="outer-text">
	<b>
		All or Nothing!
14_DOM1test.html
			c) 생성, 조회, 수정
				- document.createElement(); 메모리에만 존재하는 새로운 HTML 요소를 생성하고 반환
				- E.prepend() / E.append() : 노드를 첫 번째 혹은 마지막 자식으로 삽입 (여러 개 추가 가능)
				- E.remove() : 요소 제거
				- E.insertAdjacenElement() : 대상 요소의 지정한 위치에 새로운 요소를 삽입
					insertAdjacenElement(위치, 새로운 요소);
					
					<!-- beforebegin -->
					<div class="target">
					<!-- afterbegin -->
						내용
					<!-- beforeend -->
					</div>
					<!-- afterend -->
				- N.insertBegin(추가할 노드, 참조할 노드)
				- N.contains(주어진 노드) : 주어진 노드가 자신을 포함한 후손인지 확인
				- N.textContent : 노드의 모든 텍스트를 얻거나 변경한다.
				- E. innerHTML
				- E.dataset : 'data-" 속성값을 얻거나 지정한다.
				- E.tagName : 요소의 태그 이름을 반환, 수정 불가
				- E.id : 요소의 id 속성값을 얻거나 지정한다, 수정 가능
				- E.className : 요소의 class 속성값을 얻거나 지정. 수정 가능
				- E.getAttribute("속성명"), E.setAttribute("속성명", "값") : 속성값 가져오기
				- E.hasAttribute("속성명"), E.removeAttribute("속성명")
				- E.classList : 요소의 class 속성값을 제어
					.add(), .remove(), .toggle(), contains()
				- E.style : 요소의 style 속성의 css속성값을 얻거나 지정한다.
				- window.getComputedStyle() : 요소의 적용된 style 객체를 반환
				15_DOM2.html
		9) Event 처리
			- 3가지 구성 요소
				이벤트 소스 : 어디서 이벤트가 일어나는지
					HTML 요소 (주로 input)
				이벤트 클래스 : 어떤 이벤트가 일어났는지
					onclick, onblur, onfocus, onmouseover, onmouseout, onselect, onsubmit, onreset, onload, onunload, ondbclick, ondragdrop, onkeydown, onkeyup, onkeypress, onmove, onsize, ...
				이벤트 핸들러 : 이벤트가 발생했을 때 실행될 함수
					함수
			- 이벤트 등록 및 해제
				addEventListener(이벤트 클래스, 이벤트 핸들러, 캡쳐 타입)
				removeEventListener(이벤트 클래스, 이벤트 핸들러, 캡쳐 타입)
			- 이벤트 정보 확인 : 매개변수를 통해서 확인
				21_event4.html
			- 기본 동작 방지 : preventDefault()
				22_event5.html
			- 버블링과 캡처링 : 이벤트 전파(Propagation) 방식		
			- 이벤트 옵션
				addEventListener(이벤트 클래스, 이벤트 핸들러, 옵션)
				a) once : 핸들러를 한 번만 실행하게 해주는 옵션
				b) passive : 기본 동작과 핸들러의 실행을 분리시키는 옵션
					23_event6.html
			- 이벤트 위임(Delegation)
				24_event7.html,
			- 마우스와 포인터 이벤트
				click. dblclick, mousedown, mouseup, mouseenter, mouseleave, mousemove, contextmenu, wheel
					25_event8.html
			- 키보드 이벤트
				keydown, keyup
				focus(포커스를 얻었을 때 발생), blur(포커스를 잃었을 때 발생), input(값이 바뀌었을때), change(값이 바뀌었을때), submit(서버로 전송될 때), reset
					26_event9.html
			- 디스패치 : 강제로 이벤트를 발생
		10) 모듈화
			29_moduleTest.html, js 파일
		11) 정규 표현식(Regular Expression)
			※ regexp mdn으로 검색
			a) 문자열에서 특정 문자 조합을 찾기 위한 패턴
			b) 용도
				- 문자 검색(Search)
				- 문자 대체(Replace)
				- 문자 추출(Extract)
			c) API
				- 사용 방법
					new RegExp('표현식', '옵션')
					/표현식/옵션
				- 메서드
					정규식.test(문자열) : 일치 여부 확인
					문자열.match(정규식) : 일치하는 문자의 배열을 반환
					문자열.replace(정규식, 대체문자) : 일치하는 문자를 대체
				- 플래그
					g : 모든 문자 일치 (Global)
					i : 영어 대소문자 구별하지 않고 일치(Ignore Case)
					m : 여러 줄 일치(Multi Line), 각각의 줄을 시작과 끝으로 인식
				30_regexp1.html
			d) 패턴
				- ^ab : 줄(line) 시작에 있는 ab와 일치 (^ : caret)
				- ab$ : 줄(line) 끝에 있는 ab와 일치
				- . : 임의의 한 문자와 일치
				- a | b : a 또는 b와 일치
				- ab? : b가 없거나 b와 일치 (a, ab)

				- {3} : 3개 연속 일치
				- {3,} : 3개 이상 연속 일치
				- {3,5} : 3개 이상 5개 이하(3 ~ 5개) 연속 일치
				- + : 1회 이상 연속 일치, 같은 표현 {1,}
				- * : 0회 이상 연속 일치

				- [ab] : a 또는 b
				- [a-z] : a 부터 z 사이의 문자 구간에 일치(영어 소문자)
				- [A-Z] : A부터 Z 사이의 문자 구간에 일치(영어 대문자)
				- [0-9] : 0부터 9 사이의 문자 구간에 일치(숫자)
				- [가-힣] : 가부터 힣 사이의 문자 구간에 일치(한글)

				- \w : 63개 문자(Word, 대소영문 52개 + 숫자 10개 + _ )에 일치
				- \b : 63개 문자에 일치하지 않는 문자 경계(Boundary)
				- \d : 숫자(Digit)에 일치
				- \s : 공백(Space, Tab 등)에 일치

				- (?:) : 그룹 지정
				- (?=) : 앞쪽 일치(Lookahead)
				- (?≤) : 뒤쪽 일치(Lookbehind)
				31_regexp2.html